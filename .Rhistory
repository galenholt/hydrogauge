dplyr::select(site, short_name, variable, var_name, datasource,
period_start, period_end) |>
dplyr::mutate(varfrom = variable, varto = variable)
site_list
View(bsd)
devtools::load_all()
bsdvs <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = c('100', '140', '210', '450'),
start_time = '20200101', end_time = '20200105',
interval = 'day', data_type = 'mean',
multiplier = 1, returnformat = 'df')
View(bsdvs)
bsdvs <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = "all",
start_time = "all",
end_time = "all",
interval = 'year', data_type = 'mean',
multiplier = 1, returnformat = 'df')
devtools::load_all()
bsdvs <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = "all",
start_time = "all",
end_time = "all",
interval = 'year', data_type = 'mean',
multiplier = 1, returnformat = 'df')
bsdvs <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = "all",
start_time = "all",
end_time = "all",
interval = 'year', data_type = 'mean',
multiplier = 1, returnformat = 'df')
# Available variables, start and end times, and sites
possibles <- get_variable_list(baseURL, site_list, datasource) |>
dplyr::select(site, short_name, variable, var_name, datasource,
period_start, period_end) |>
dplyr::mutate(varfrom = variable, varto = variable)
possibles
# add derived if they exist
poss140 <- possibles[possibles$variable == '100.00', ]
poss141 <- poss140
poss140$varto <- '140.00'
poss141$varto <- '141.00'
possibles <- dplyr::bind_rows(possibles, poss140, poss141)
# possibles has variables with .00 on the end, var_list might or might not. make it
var_list <- var_list |>
stringr::str_remove_all("\\.00") |>
stringr::str_c(".00")
!('all' %in% var_list)
var_list
stringr::str_detect(var_list, 'all')
var_list <- "all"
possibles
start_time != 'all'
possibles$start_time <- possibles$period_start
end_time != 'all'
possibles$end_time <- possibles$period_end
length(data_type) == length(var_list)
length(var_list)
devtools::load_all()
bsdvs <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = "all",
start_time = "all",
end_time = "all",
interval = 'year', data_type = 'mean',
multiplier = 1, returnformat = 'df')
bsdvs
View(bsdvs)
bsdvs <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = "all",
start_time = "all",
end_time = "all",
interval = 'decade', data_type = 'mean',
multiplier = 1, returnformat = 'df')
devtools::load_all()
biw <- get_ts_traces2(site_list = barwon,
datasource = 'A',
var_list = "100",
start_time = "20200101",
end_time = "20211231",
interval = 'eon', data_type = 'mean',
multiplier = 1, returnformat = 'df')
possibles
i <- 1
pl = list("function" = 'get_ts_traces',
"version" = "2",
"params" = list("site_list" = possibles$site[i],
"start_time" = possibles$start_time[i],
"varfrom" = possibles$varfrom[i],
"varto" = possibles$varto[i],
"interval" = interval,
"datasource" = datasource,
"end_time" = possibles$end_time[i],
"data_type" = possibles$data_type[i],
"multiplier" = multiplier))
# hit the api
rb <- get_response(baseURL, pl)
rb
# clean up with a function because so ugly
bt <- clean_trace_list(rb)
# clean up with a function because so ugly
bt <- clean_trace_list(rb)
tibble::as_tibble(responsebody[2]) |> # the [2] drops the error column
tidyr::unnest_longer(col = tidyselect::where(is.list)) |> # a `return` list
tidyr::unnest_wider(col = tidyselect::where(is.list)) |> # complex set of lists
tidyr::unnest_wider(col = site_details) |> # columns of info about the site
dplyr::rename(site_name = name, site_short_name = short_name) |>
# there are name conflicts between site and varfrom and varto.
# and we can drop varfrom
dplyr::select(-varfrom_details) |>
tidyr::unnest_wider(col = varto_details) |>
dplyr::rename_with(~(paste0('variable_', .)),
c(short_name, name))
biw <- get_ts_traces2(site_list = barwon,
datasource = 'A',
var_list = "100",
start_time = "20200101",
end_time = "20211231",
interval = 'eon', data_type = 'mean',
multiplier = 1, returnformat = 'df')
response_body
str(response_body)
biw <- get_ts_traces2(site_list = barwon,
datasource = 'A',
var_list = "100",
start_time = "20200101",
end_time = "20211231",
interval = 'eon', data_type = 'mean',
multiplier = 1, returnformat = 'df')
i <- 1
pl = list("function" = 'get_ts_traces',
"version" = "2",
"params" = list("site_list" = possibles$site[i],
"start_time" = possibles$start_time[i],
"varfrom" = possibles$varfrom[i],
"varto" = possibles$varto[i],
"interval" = interval,
"datasource" = datasource,
"end_time" = possibles$end_time[i],
"data_type" = possibles$data_type[i],
"multiplier" = multiplier))
# hit the api
rb <- get_response(baseURL, pl)
# clean up with a function because so ugly
bt <- clean_trace_list(rb)
bodytib <- tibble::as_tibble(responsebody[2]) |> # the [2] drops the error column
tidyr::unnest_longer(col = tidyselect::where(is.list)) |> # a `return` list
tidyr::unnest_wider(col = tidyselect::where(is.list)) |> # complex set of lists
tidyr::unnest_wider(col = site_details) |> # columns of info about the site
dplyr::rename(site_name = name, site_short_name = short_name) |>
# there are name conflicts between site and varfrom and varto.
# and we can drop varfrom
dplyr::select(-varfrom_details) |>
tidyr::unnest_wider(col = varto_details) |>
dplyr::rename_with(~(paste0('variable_', .)),
c(short_name, name))
bodytib
# break in here to get the quality codes to match
qc <- bodytib |>
dplyr::select(quality_codes, site, variable) |>
tidyr::unnest_longer(col = quality_codes) |>
dplyr::mutate(quality_codes_id = as.integer(quality_codes_id))
names(bodytib)
View(bodytib)
# finish unpacking
bodytib <- bodytib |>
dplyr::select(-quality_codes) |>
tidyr::unnest_longer(col = trace) |>
tidyr::unnest_wider(col = trace)
# I guess fail if any fail. I could pass, but do I want to? could remove, warn, and if anything left, pass?
# would be better to capture ALL of the issues, but this grabs the first one.
bodytib |>
dplyr::filter(error_num != 0) |>
dplyr::slice(1) |>
dplyr::select(error_num, error_msg) |>
api_error_catch()
devtools::load_all()
biw <- get_ts_traces2(site_list = barwon,
datasource = 'A',
var_list = "100",
start_time = "20200101",
end_time = "20211231",
interval = 'eon', data_type = 'mean',
multiplier = 1, returnformat = 'df')
system.time(b2 <- get_ts_traces2(site_list = barwon,
datasource = 'A',
var_list = '100',
start_time = '20200101', end_time = '20200105',
interval = 'day', data_type = 'mean',
multiplier = 1, returnformat = 'df'))
bodytib
bodytib |>
dplyr::filter(error_num != 0)
errn <- c('1', '2')
errm <- c('test', 'test2')
paste0("error number ", errn, 'message: ', errm)
?abort
stringr::str_flatten(paste0("error number ", errn, 'message: ', errm), collapse = '\n')
devtools::load_all()
devtools::load_all()
bsdvs <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = "all",
start_time = "all",
end_time = "all",
interval = 'decade', data_type = 'mean',
multiplier = 1, returnformat = 'df')
system.time(b2 <- get_ts_traces2(site_list = barwon,
datasource = 'A',
var_list = '100',
start_time = '20200101', end_time = '20200105',
interval = 'day', data_type = 'mean',
multiplier = 1, returnformat = 'df'))
usethis::use_package('doFuture', type = 'suggests')
devtools::load_all()
doFuture::registerDoFuture()
doFuture::plan(multisession)
?plan
future::plan(multisession)
future::plan('multisession')
system.time(bsdvs2p <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = c('100', '140', '210', '450'),
start_time = '20200101', end_time = '20200105',
interval = 'day', data_type = 'mean',
multiplier = 1, returnformat = 'df'))
?foreach
future::plan('sequential')
system.time(bsdvs2p <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = c('100', '140', '210', '450'),
start_time = '20200101', end_time = '20200105',
interval = 'day', data_type = 'mean',
multiplier = 1, returnformat = 'df'))
system.time(bsdvs2p <- get_ts_traces2(site_list = c(barwon, steavenson),
datasource = 'A',
var_list = c('100', '140', '210', '450'),
start_time = '20200101', end_time = '20200105',
interval = 'day', data_type = 'mean',
multiplier = 1, returnformat = 'df'))
?devtools::build
?devtools::document
devtools::document
devtools::document()
devtools::document()
devtools::load_all()
?get_ts_traces
usethis::use_vignette("Overview")
library(vicwater)
var_info <- get_variable_list(site_list = c(barwon, golf, taggerty),
datasource = "A")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(vicwater)
barwon <- '233217'
steavenson <- '405328'
taggerty <- '405331'
golf <- '405837'
var_info <- get_variable_list(site_list = c(barwon, golf, taggerty),
datasource = "A")
var_info
View(var_info)
var_info <- get_variable_list(site_list = c(barwon, taggerty, steavenson, golf),
datasource = "A")
var_info
devtools::load_all()
var_info <- get_variable_list(site_list = c(barwon, taggerty, steavenson, golf),
datasource = "A")
var_info
devtools::load_all()
var_info <- get_variable_list(site_list = c(barwon, taggerty, steavenson, golf),
datasource = "A")
var_info
?get_ts_traces
ts_days <- get_ts_traces(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450"),
start_time = 20200101,
end_time = 20200105,
interval = "day",
data_type = "mean",
multiplier = 1,
returnformat = 'df')
devtools::load_all()
ts_days <- get_ts_traces(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450"),
start_time = 20200101,
end_time = 20200105,
interval = "day",
data_type = "mean",
multiplier = 1,
returnformat = 'df')
ts_days
ts_days
?arrange
devtools::load_all()
ts_days <- get_ts_traces(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450"),
start_time = 20200101,
end_time = 20200105,
interval = "day",
data_type = "mean",
multiplier = 1,
returnformat = 'df')
ts_days
devtools::load_all()
ts_days <- get_ts_traces(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450"),
start_time = 20200101,
end_time = 20200105,
interval = "day",
data_type = "mean",
multiplier = 1,
returnformat = 'df')
ts_days
ts_days
names(ts_days)
ts_rain <- get_ts_traces(site_list = c(barwon, golf),
datasource = "A",
var_list = c("10"),
start_time = 20200101,
end_time = 20200105,
interval = "day",
data_type = "tot",
multiplier = 1,
returnformat = 'df')
ts_rain
ts_days2 <- get_ts_traces2(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450", "10"),
start_time = 20200101,
end_time = 20200105,
interval = "day",
data_type = c("mean", "mean", "mean", "tot"),
multiplier = 1,
returnformat = 'df')
get_ts_traces2(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450", "10"),
start_time = 20200101,
end_time = 20200105,
interval = "day",
data_type = c("mean", "mean", "mean", "tot"),
multiplier = 1,
returnformat = 'df')
# Available variables, start and end times, and sites
possibles <- get_variable_list(baseURL, site_list, datasource) |>
dplyr::select(site, short_name, variable, var_name, datasource,
period_start, period_end) |>
dplyr::mutate(varfrom = variable, varto = variable)
# add derived if they exist
poss140 <- possibles[possibles$variable == '100.00', ]
poss141 <- poss140
poss140$varto <- '140.00'
poss141$varto <- '141.00'
possibles <- dplyr::bind_rows(possibles, poss140, poss141)
possibles
!('all' %in% var_list)
# possibles has variables with .00 on the end, var_list might or might not. make it
var_list <- var_list |>
stringr::str_remove_all("\\.00") |>
stringr::str_c(".00")
# cut to those asked for
possibles <- possibles[possibles$varto %in% var_list, ]
possibles
start_time != 'all'
possibles$start_time <- fix_times(start_time)
possibles$end_time <- fix_times(end_time)
length(data_type) == 1
length(data_type) == length(var_list) & length(var_list) != 1
varfun <- tibble::tibble(varto = var_list, data_type)
possibles <- dplyr::left_join(possibles, varfun, by = 'varto')
varfun
possibles
i <- 1
pl = list("function" = 'get_ts_traces',
"version" = "2",
"params" = list("site_list" = possibles$site[i],
"start_time" = possibles$start_time[i],
"varfrom" = possibles$varfrom[i],
"varto" = possibles$varto[i],
"interval" = interval,
"datasource" = datasource,
"end_time" = possibles$end_time[i],
"data_type" = possibles$data_type[i],
"multiplier" = multiplier))
# hit the api
rb <- get_response(baseURL, pl)
# clean up with a function because so ugly
bt <- clean_trace_list(rb)
i <- 2
pl = list("function" = 'get_ts_traces',
"version" = "2",
"params" = list("site_list" = possibles$site[i],
"start_time" = possibles$start_time[i],
"varfrom" = possibles$varfrom[i],
"varto" = possibles$varto[i],
"interval" = interval,
"datasource" = datasource,
"end_time" = possibles$end_time[i],
"data_type" = possibles$data_type[i],
"multiplier" = multiplier))
# hit the api
rb <- get_response(baseURL, pl)
# clean up with a function because so ugly
bt <- clean_trace_list(rb)
i <- 3
pl = list("function" = 'get_ts_traces',
"version" = "2",
"params" = list("site_list" = possibles$site[i],
"start_time" = possibles$start_time[i],
"varfrom" = possibles$varfrom[i],
"varto" = possibles$varto[i],
"interval" = interval,
"datasource" = datasource,
"end_time" = possibles$end_time[i],
"data_type" = possibles$data_type[i],
"multiplier" = multiplier))
# hit the api
rb <- get_response(baseURL, pl)
# clean up with a function because so ugly
bt <- clean_trace_list(rb)
i <- 4
pl = list("function" = 'get_ts_traces',
"version" = "2",
"params" = list("site_list" = possibles$site[i],
"start_time" = possibles$start_time[i],
"varfrom" = possibles$varfrom[i],
"varto" = possibles$varto[i],
"interval" = interval,
"datasource" = datasource,
"end_time" = possibles$end_time[i],
"data_type" = possibles$data_type[i],
"multiplier" = multiplier))
# hit the api
rb <- get_response(baseURL, pl)
possibles[4,]
possibles$period_start > possibles$end_time
as.numeric(possibles$period_start) > as.numeric(possibles$end_time)
as.numeric(possibles$period_end) < as.numeric(possibles$start_time)
possibles
# If we miss the dates on a single call, it errors. Mimic the silent deletion
# of the API itself and just throw those out
record_begins_after_end <- as.numeric(possibles$period_start) > as.numeric(possibles$end_time)
record_ends_before_start <- as.numeric(possibles$period_end) < as.numeric(possibles$start_time)
misstimes <- record_begins_after_end | record_ends_before_start
misstimes
possibles <- possibles[!misstimes, ]
possibles
devtools::load_all()
ts_days2 <- get_ts_traces2(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450", "10"),
start_time = 20200101,
end_time = 20200105,
interval = "day",
data_type = c("mean", "mean", "mean", "tot"),
multiplier = 1,
returnformat = 'df')
ts_days2
devtools::load_all()
ts_days2 <- get_ts_traces2(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450", "10"),
start_time = 20200101,
end_time = 20200105,
interval = "day",
data_type = c("mean", "mean", "mean", "tot"),
multiplier = 1,
returnformat = 'df')
ts_days2
ts_days2
library(vicwater)
library(vicwater)
usethis::use_package('dplyr')
usethis::use_package('rlang')
usethis::use_github_action_check_standard()
usethis::use_version()
library(vicwater)
ts_days2 <- get_ts_traces2(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450", "10"),
start_time = 20100101,
end_time = 20110101,
interval = "day",
data_type = c("mean", "mean", "mean", "tot"),
multiplier = 1,
returnformat = 'df')
ts_daysY <- get_ts_traces2(site_list = c(barwon, steavenson, taggerty, golf),
datasource = "A",
var_list = c("100", "140", "450", "10"),
start_time = 20100101,
end_time = 20110101,
interval = "day",
data_type = c("mean", "mean", "mean", "tot"),
multiplier = 1,
returnformat = 'df')
library(ggplot2)
ggplot(ts_daysY, aes(x = time, y = value, color = site_short_name)) +
facet_wrap(~variable_short_name, scales = 'free') +
geom_point() + geom_line()
usethis::use_readme_rmd()
