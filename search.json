[{"path":"https://galenholt.github.io/hydrogauge/articles/BOM_quality_codes.html","id":"quality-codes","dir":"Articles","previous_headings":"","what":"Quality Codes","title":"BOM quality codes","text":"10 quality-record set best available given technologies, techniques monitoring objectives time classification. 90 quality-B record set compromised ability truly represent parameter. 110 quality-C record set estimate. 140 quality-E record set’s ability truly represent monitored parameter known. 210 quality-F record set release quality contains missing data.","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/BOM_quality_codes.html","id":"rainfall-specific-quality-codes","dir":"Articles","previous_headings":"","what":"Rainfall specific Quality Codes","title":"BOM quality codes","text":"zero-rainfall record set measurement recorded period aggregated total calculated.","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/BOM_quality_codes.html","id":"interpolation-types","dir":"Articles","previous_headings":"","what":"Interpolation Types","title":"BOM quality codes","text":"101 Continuous data points - interpolation Spot samples, irregular sparse readings (groundwater readings staff gauge readings). expression possible 2 values. 102 Continuous data points - Linear interpolation Instantaneously recorded, continuous time series data. 103 Continuous data points - Constant next time stamp Mean value constant instantaneous value. Examples means water level, flow recorded mean values examples constant instantaneous values pump rates gate settings. 104 Continuous data points - Constant since previous time stamp Mean value related end interval. 201 Continuous totals - interpolation Tipping buckets, two tips zero-total returned. 202 Continuous totals - Linear interpolation Instantaneously recorded continuous time series data. 205 Continuous totals - Linear next time stamp total value stored beginning totalling interval. total assumed grow linear next value. 206 Continuous totals - Linear since previous time stamp total value stored end totalling interval. total assumed grow linear since previous value. 301 Continuous Directional Values - interpolation Spot samples directions (wind direction). 302 Continuous Directional Values - Linear interpolation Direction measurements linear interpolation. value type .directional. expresses wrap 360 degrees. 303 Continuous Directional Values - Constant next time stamp Constant direction next time stamp direction measurement (gate setting). 304 Continuous Directional Values - Constant since previous time stamp Constant direction since previous time stamp direction measurement (gate setting). 403 Aggregated Minimum - Constant next time stamp minimum representative observation interval. interval main time stamp equidistant stored beginning interval. 404 Aggregated Minimum - Constant since previous time stamp minimum representative observation interval. interval main time stamp equidistant stored end interval. 503 Aggregated Maximum - Constant next time stamp maximum representative observation interval. interval main time stamp equidistant stored beginning interval. 504 Aggregated Maximum - Constant since previous time stamp maximum representative observation interval. interval main time stamp equidistant stored end interval. 603 Aggregated Means - Constant next time stamp interval main time stamp stored beginning interval. mean representative next time stamp. 604 Aggregated Means - Constant since previous time stamp interval main time stamp stored end interval. mean representative since previous time stamp. 703 Aggregated Totals - Constant next time stamp interval main time stamp stored beginning interval. total representative next time stamp. 704 Aggregated Totals - Constant since previous time stamp interval main time stamp stored end interval. total representative since previous time stamp.","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/data-portals.html","id":"hydstra","dir":"Articles","previous_headings":"","what":"Hydstra","title":"Data portals","text":"theory, able call hydstra functions Hydstra source. catch , finding API path always straightforward. example, work Washington Department Ecology, California department water resources, Western Australia, none addresses work. Either orgs don’t publish APIs, undiscovered ‘…/webservice.exe?’ paths waiting discovered used.","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/data-portals.html","id":"australian-states","dir":"Articles","previous_headings":"Hydstra","what":"Australian states","title":"Data portals","text":"addition Victoria, New South Wales Queensland public portals available name portal arguments. demonstrate, can use get_datasources_by_site() see datasources available (note major differences states):","code":"nsw_ds <- get_datasources_by_site(portal = 'NSW',                                    site_list = c(\"422028\", \"410007\")) nsw_ds #> # A tibble: 11 × 2 #>    site   datasource     #>    <chr>  <chr>          #>  1 422028 AUTOQCNOWTELEM #>  2 422028 A              #>  3 422028 PROV           #>  4 422028 QA             #>  5 422028 MIR_DRR_PROV   #>  6 422028 WEBPROV        #>  7 410007 AUTOQCNOWTELEM #>  8 410007 A              #>  9 410007 PROV           #> 10 410007 QA             #> 11 410007 MIR_DRR_PROV qld_ds <- get_datasources_by_site(portal = 'QLD',                                    site_list = c(\"423203A\", \"424201A\")) qld_ds #> # A tibble: 8 × 2 #>   site    datasource #>   <chr>   <chr>      #> 1 423203A FDR        #> 2 423203A A          #> 3 423203A TE         #> 4 423203A RAW        #> 5 424201A FDR        #> 6 424201A A          #> 7 424201A TE         #> 8 424201A RAW"},{"path":"https://galenholt.github.io/hydrogauge/articles/data-portals.html","id":"traces-and-plots","dir":"Articles","previous_headings":"Hydstra > Australian states","what":"Traces and plots","title":"Data portals","text":"Now can get_ts_traces() , just keep things consistent NSW:  QLD:","code":"nsw_ts_days <- get_ts_traces(portal = 'NSW',                           site_list = c(\"422028\", \"410007\"),                          datasource = \"A\",                           var_list = c(\"100\", \"141\", \"450\"),                          start_time = 20200101,                          end_time = 20201231,                          interval = \"day\",                          data_type = \"mean\",                          multiplier = 1,                          returnformat = 'df') ggplot(nsw_ts_days, aes(x = time, y = value, color = site_short_name)) +    facet_wrap(~variable_short_name, scales = 'free') +    geom_line() qld_ts_days <- get_ts_traces(portal = 'QLD',                           site_list = c(\"423203A\", \"424201A\"),                          datasource = \"A\",                           var_list = c(\"100\", \"141\", \"450\"),                          start_time = 20200101,                          end_time = 20201231,                          interval = \"day\",                          data_type = \"mean\",                          multiplier = 1,                          returnformat = 'df') ggplot(qld_ts_days, aes(x = time, y = value, color = site_short_name)) +    facet_wrap(~variable_short_name, scales = 'free') +    geom_line()"},{"path":"https://galenholt.github.io/hydrogauge/articles/hydrogauge.html","id":"which-api","dir":"Articles","previous_headings":"","what":"Which API?","title":"hydrogauge","text":"know API style ? ’s best find documentation. hydrogauge try infer, though guarantees always guess right. find inference, run parse_url() test = TRUE, type = TRUE: BOM (KiWIS) NSW (hydstra) API-agnostic wrapper development, though always still work best type known priori.","code":"parse_url('http://www.bom.gov.au/waterdata/services', test = TRUE, type = TRUE) #> # A tibble: 1 × 2 #>   baseURL                                  portal_type #>   <chr>                                    <chr>       #> 1 http://www.bom.gov.au/waterdata/services kiwis parse_url('https://realtimedata.waternsw.com.au/cgi/webservice.exe?', test = TRUE, type = TRUE) #> # A tibble: 1 × 2 #>   baseURL                                                  portal_type #>   <chr>                                                    <chr>       #> 1 https://realtimedata.waternsw.com.au/cgi/webservice.exe? hydstra"},{"path":"https://galenholt.github.io/hydrogauge/articles/hydrogauge.html","id":"times","dir":"Articles","previous_headings":"","what":"Times","title":"hydrogauge","text":"sets API (Hydstra/hydllp kiwis) expect times database-local return times local database (user, necessarily gauge ). package provides functionality return times formats (see return_timezone argument), including standard parseable character format, UTC, local time objects. general, working UTC offsets preferable, care taken giving desired start end times, need database-local time.","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/hydrogauge.html","id":"hydstra-definitions-and-available-options","dir":"Articles","previous_headings":"","what":"Hydstra definitions and available options","title":"hydrogauge","text":"tried keep function argument names API, API restricts options function arguments. API functions documented Kisters (creators), bit information options Queensland, though discrepancies states. quite lot digging testing, incomplete set definitions common arguments potential values follows: site_list gauge number character (functions accept vector gauge numbers). Can gauge number database. Obtaining programatically limited currently, except get_sites_by_datasource. datasource type data. Victoria returns \"\", \"TELEM\", \"TELEMCOPY\" get_datasources_by_site(), may others sites examined. ‘archive’, TELEM ‘telemetry’, ’m sure ’s copy. \"CP\" seems work NSW, Victoria, QLD, isn’t documented anywhere can find. quick testing get_sites_by_datasource shows many sites TELEM, TELEM subset- sites TELEM . Initial testing get_db_info also finds sites appear , seem data. var_list type variable, e.g. rainfall, flow, temp. character numeric code, without trailing “.00”, can vector, e.g. c(“100”, “210.00”). currently comprehensive list possible variables meaning, get_variables_by_site provide one set sites. Queensland documentation gives information, numbers always different databases. variables (typically discharge) calculated, appear queries available variables get_variables_by_site. ’m aware “141”- discharge ML/day, “140”, discharge cumecs (m3/secm^3/sec). start_time end_time start end times period requested. API strict 14-digit strings “YYYYMMDDHHIIEE”, functions take date formats (posix), character, numeric, need 14-digits. dates, least YYYYMMDD (either character numeric), rest padded zeros. interval time interval return values timeseries. Options seem (based API error messages) \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\". don’t think capitalisation matters. Also thoroughly tested available variables sites multiplier allows intervals like 5 days, passing interval = 'day' multiplier = 5. data_type statistic apply within interval get values. Options (API error messages): \"mean\", \"max\", \"min\", \"start\", \"end\", \"first\", \"last\", \"tot\", \"maxmin\", \"point\", \"cum\". currently tested. Warning: given API call can takes one value, applied variables. unlikely appropriate asking many variables. run get_ts_traces() multiple times, different subsets var_type, appropriate data_types","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-traces-workflow.html","id":"querying-available-data","dir":"Articles","previous_headings":"","what":"Querying available data","title":"hydstra workflow","text":"asking timeseries data, want ask data available. use","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-traces-workflow.html","id":"finding-datasources","dir":"Articles","previous_headings":"Querying available data","what":"Finding datasources","title":"hydstra workflow","text":"see datasources available site, use get_datasources_by_site(). typically use “”, ’s worth looking see datasources available target site(s), next step (finding variables) , see whether available variables (timeperiods) differ. Note- often datasources work returned . Plot see data availability (@ref(fig:datasource)). Datasources available gauge. returned API, may complete. Specifying datasources pull may work.","code":"ds <- get_datasources_by_site(portal = 'Vic',                                site_list = c(barwon, steavenson,                                              taggerty, golf)) ds #> # A tibble: 10 × 2 #>    site   datasource #>    <chr>  <chr>      #>  1 233217 A          #>  2 233217 TELEM      #>  3 233217 TELEMCOPY  #>  4 405328 A          #>  5 405328 TELEM      #>  6 405328 TELEMCOPY  #>  7 405331 A          #>  8 405837 A          #>  9 405837 TELEM      #> 10 405837 TELEMCOPY plot_datasources_by_site(ds) #> Joining with `by = join_by(site, datasource)`"},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-traces-workflow.html","id":"finding-available-variables-and-timespans","dir":"Articles","previous_headings":"Querying available data","what":"Finding available variables and timespans","title":"hydstra workflow","text":"need know variables available extract timeseries . use get_variable_list() get information, including names numbers, well details time period record units. returns tibble information gauge variable (@tbl-vars). things note- gives names gauges, names values variables, start end date . example, Barwon’s start date stage (100) 1961, others (pH, ppm, etc) didn’t start 2010. Note return derived discharge variables (140 141). variable 100 (stage height) exists, two usually , though sometimes ratings curve. Depending goals, can helpful visualise availability variable (@ref(fig:vars-duration)) period record variable (@ref(fig:vars-period)). Availability variable gauge, color indicating duration record days. Availability variable gauge, period record indicated lines.","code":"var_info <- get_variable_list(portal = 'Vic',                                site_list = c(barwon, taggerty,                                              steavenson, golf),                                datasource = \"A\") var_info #> # A tibble: 12 × 11 #>    site   short_name       long_name variable units var_name period_start        #>    <chr>  <chr>            <chr>     <chr>    <chr> <chr>    <dttm>              #>  1 233217 BARWON @ GEELONG BARWON R… 100.00   metr… Stream … 1961-03-06 07:15:00 #>  2 233217 BARWON @ GEELONG BARWON R… 210.00   pH    Acidity… 2010-07-06 02:31:00 #>  3 233217 BARWON @ GEELONG BARWON R… 215.00   ppm   Dissolv… 2010-07-06 02:31:00 #>  4 233217 BARWON @ GEELONG BARWON R… 450.00   Degr… Water T… 2010-07-06 02:31:00 #>  5 233217 BARWON @ GEELONG BARWON R… 810.00   NTU   Turbidi… 2010-07-06 02:31:00 #>  6 233217 BARWON @ GEELONG BARWON R… 820.00   µS/c… Conduct… 2010-07-06 02:31:00 #>  7 405331 TAGGERTY R LADY… TAGGERTY… 100.00   metr… Stream … 2010-07-29 02:20:00 #>  8 405331 TAGGERTY R LADY… TAGGERTY… 450.00   Degr… Water T… 2010-07-29 02:20:00 #>  9 405331 TAGGERTY R LADY… TAGGERTY… 810.00   NTU   Turbidi… 2010-07-29 02:20:00 #> 10 405331 TAGGERTY R LADY… TAGGERTY… 820.00   µS/c… Conduct… 2010-07-29 02:20:00 #> 11 405328 STEAVENSON R @ … STEAVENS… 100.00   metr… Stream … 2009-11-19 07:08:00 #> 12 405837 R.G. MARYSVILLE  RAINGAUG… 10.00    mm    Rainfal… 2001-06-21 04:27:00 #> # ℹ 4 more variables: period_end <dttm>, subdesc <chr>, datasource <chr>, #> #   database_timezone <chr> var_info |>    dplyr::mutate(duration = period_end-period_start) |>  ggplot(aes(x = var_name, y = site, fill = duration)) +   geom_tile() +   scale_fill_viridis_c(option = 'plasma') +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) var_info |>    tidyr::pivot_longer(cols = starts_with('period'), names_to = 'startend', values_to = 'date') |>  ggplot(aes(y = date, x = site, color = var_name)) +   geom_point(position = position_dodge(width = 0.5)) + geom_line(position = position_dodge(width = 0.5)) +   coord_flip()"},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-traces-workflow.html","id":"obtaining-timeseries","dir":"Articles","previous_headings":"","what":"Obtaining timeseries","title":"hydstra workflow","text":"typically main goal, steps getting us point knowing ask . Specifically, get_variable_list() gives us reference know variables ask relevant timeperiods.","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-traces-workflow.html","id":"basic-operation","dir":"Articles","previous_headings":"Obtaining timeseries","what":"Basic operation","title":"hydstra workflow","text":"general, use get_ts_traces() set sites, variables, timeperiods, statistics. experimental wrapper functions fetch_hydstra_timeseries() fetch_timeseries() call get_ts_traces() internally. case, pitfalls avoid. just want set variables need statistic applied (e.g. daily mean flows), can pass vector. example, get daily mean stage height (100), discharge (ML/day, 141), temperature (450), can one call, even multiple gauges. Asking one year keep call quick. returns tall dataframe requested values site metadata including site name, location, etc (@tbl-ts), user can split plot want (e.g. @ref(fig:ts)). options return lists dataframes user want sites variables combined- returnformat = \"varlist\" list one tibble per variable returnformat = \"sitelist\" list one tibble per site returnformat = \"sxvlist\" list one tibble per site x variable combo (including empty lists missing combos) Timeseries requested data, available. Note variable isn’t available gauge just isn’t returned, timeperiods. requested data four sites, Barwon returns variables. golf course gauge return anything collect variables, Steavenson returns level discharge temp, Taggerty doesn’t appear despite variables ’ve asked data decommissioned.","code":"ts_days <- get_ts_traces(portal = 'Vic',                           site_list = c(barwon, steavenson, taggerty, golf),                          datasource = \"A\",                           var_list = c(\"100\", \"141\", \"450\"),                          start_time = 20200101,                          end_time = 20201231,                          interval = \"day\",                          data_type = \"mean\",                          multiplier = 1,                          returnformat = 'df') # rows.print doesn't really work with devtools::build_readme(), so use head head(ts_days, 30) #> # A tibble: 30 × 20 #>    error_num compressed site_short_name  longitude site_name   latitude org_name #>        <int> <chr>      <chr>                <dbl> <chr>          <dbl> <chr>    #>  1         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #>  2         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #>  3         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #>  4         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #>  5         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #>  6         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #>  7         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #>  8         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #>  9         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #> 10         0 0          BARWON @ GEELONG      144. BARWON RIV…    -38.2 Dept. S… #> # ℹ 20 more rows #> # ℹ 13 more variables: value <dbl>, time <dttm>, quality_codes_id <int>, #> #   site <chr>, variable_short_name <chr>, precision <chr>, subdesc <chr>, #> #   variable <chr>, units <chr>, variable_name <chr>, database_timezone <chr>, #> #   quality_codes <chr>, data_type <chr> ts_days |>    ggplot(aes(x = time, y = value, color = variable_short_name)) +   geom_line() +   facet_grid(variable_short_name ~ site_short_name, scales = 'free')"},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-traces-workflow.html","id":"multiple-variables-multiple-statistics","dir":"Articles","previous_headings":"Obtaining timeseries","what":"Multiple variables, multiple statistics","title":"hydstra workflow","text":"Now, want another set variables different statistic (e.g. rainfall makes sense daily sum, mean), need separate call get_ts_traces() different data_type argument. Note ignore gauges without info (@ref(tab:ts-rain-tab), @ref(fig:ts-rain-fig)). Timeseries rainfall data, available. user wants combine across different statistics, use dplyr::bind_rows() combine post-hoc. automated approach can simplify common workflows (especially pulling period record many gauges) available fetch_hydstra_timeseries(), care must taken avoid inappropriate statistics. See article.","code":"ts_rain <- get_ts_traces(portal = 'Vic',                           site_list = c(barwon, golf),                           datasource = \"A\",                           var_list = c(\"10\"),                          start_time = 20200101,                          end_time = 20201231,                          interval = \"day\",                          data_type = \"tot\",                          multiplier = 1,                          returnformat = 'df') head(ts_rain, 30) #> # A tibble: 30 × 20 #>    error_num compressed site_short_name longitude site_name    latitude org_name #>        <int> <chr>      <chr>               <dbl> <chr>           <dbl> <chr>    #>  1         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #>  2         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #>  3         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #>  4         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #>  5         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #>  6         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #>  7         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #>  8         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #>  9         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #> 10         0 0          R.G. MARYSVILLE      146. RAINGAUGE @…    -37.5 Dept. S… #> # ℹ 20 more rows #> # ℹ 13 more variables: value <dbl>, time <dttm>, quality_codes_id <int>, #> #   site <chr>, variable_short_name <chr>, precision <chr>, subdesc <chr>, #> #   variable <chr>, units <chr>, variable_name <chr>, database_timezone <chr>, #> #   quality_codes <chr>, data_type <chr> ts_rain |>    ggplot(aes(x = time, y = value, color = variable_short_name)) +   geom_line() +   facet_grid(variable_short_name ~ site_short_name, scales = 'free')"},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-wrapper.html","id":"period-of-record","dir":"Articles","previous_headings":"","what":"Period of record","title":"hydstra wrapper","text":"’ll use set sites core hydstra demonstration, chosen capture range periods records available variables. Upper Steavenson (405328) flow Barwon (233217) many variables, start dates differ Taggerty (405331) longer operation- ran 2010-2013 Marysville golf course (405837) rainfall Discharge period record three gauges.","code":"barwon <- '233217' steavenson <- '405328' taggerty <- '405331' golf <- '405837' discharge_record <- fetch_hydstra_timeseries(portal = 'vic',                                         gauge = c(barwon, steavenson, taggerty),                                        var_list = '141',                                        start_time = 'all',                                        end_time = 'all',                                        timeunit = 'day',                                        statistic = 'mean') #> Loading required package: foreach #> Loading required package: future discharge_record |>    ggplot(aes(x = time, y = value, color = site_short_name)) +   geom_line() +   facet_grid(site_short_name~., scales = 'free_y') +   labs(y = unique(discharge_record$variable_short_name))"},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-wrapper.html","id":"multiple-data-types","dir":"Articles","previous_headings":"","what":"Multiple data types","title":"hydstra wrapper","text":"can also pull data available variables passing '' var_list. DANGER: var_type = '', statistic applied variables. Calling '' start_time 'end_time' give variable different period record differ; times found row returned get_variable_list(). sake demonstration, make bad choice getting data, summarised @tbl-. throws warning ’s bad idea general. can request different statistics different variables variables passed vector arguments var_list, though know . case, statistic argument vector matched length var_list. Let’s ask period record daily mean discharge, total daily rainfall, maximum daily temperature Barwon (233217), returns different statistics variable (@tbl-diffstats).","code":"all_vars_fullperiod <- fetch_hydstra_timeseries(portal = 'vic',                                         gauge = c(barwon, golf),                                        var_list = 'all',                                        start_time = 'all',                                        end_time = 'all',                                        timeunit = 'day',                                        statistic = 'mean') #> Warning: `var_list = 'all'` is *very* dangerous, since it applies the same #> `statistic` (`data_type` in get_ts_traces), i.e. aggregation function, to all #> variables, which is rarely appropriate. Check the variables available for your #> sites and make sure you want to do this. all_vars_fullperiod |>    dplyr::summarise(n_records = dplyr::n(),                     .by = c(site_short_name, variable_short_name, statistic)) |>    knitr::kable() different_statistics <- fetch_hydstra_timeseries(portal = 'vic',                                         gauge = c(barwon, golf),                                        var_list = c('141', '10', '450'),                                        start_time = 'all',                                        end_time = 'all',                                        timeunit = 'day',                                        statistic = c('mean', 'tot', 'max')) different_statistics |>    dplyr::summarise(n_records = dplyr::n(),                     .by = c(site_short_name, variable_short_name, statistic)) |>    knitr::kable()"},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-wrapper.html","id":"regex-selection","dir":"Articles","previous_headings":"","what":"Regex selection","title":"hydstra wrapper","text":"can also use variable unit arguments instead var_list search variables name, fetch_kiwis_timeseries(). experimental, moving towards unified wrapper. can use recapitulate pull discharge gauges (@ref(fig:discharge-byname)). Discharge period record three gauges, obtained name.","code":"by_name <- fetch_hydstra_timeseries(portal = 'vic',                                         gauge = c(barwon, steavenson, taggerty),                                        variable = 'discharge',                                        unit = 'ML/d',                                        start_time = 'all',                                        end_time = 'all',                                        timeunit = 'day',                                        statistic = 'mean') by_name |>    ggplot(aes(x = time, y = value, color = site_short_name)) +   geom_line() +   facet_grid(site_short_name~., scales = 'free_y') +   labs(y = unique(by_name$variable_short_name))"},{"path":"https://galenholt.github.io/hydrogauge/articles/hydstra-wrapper.html","id":"large-requests","dir":"Articles","previous_headings":"","what":"Large requests","title":"hydstra wrapper","text":"Note: big pulls, can useful use bare get_variable_list() get_ts_traces() approach, least manual check get_variable_list(). experience, often errors gauges issues mean clean pulls need troubleshooting variable availability etc. often easiest find solve problems low-level API interface. Making fetch_hydstra_timeseries() incorporate development.","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/kiwis-workflow.html","id":"querying-available-data","dir":"Articles","previous_headings":"","what":"Querying available data","title":"KiWIS workflow","text":"get timeseries, user needs ask specific variables timespans. Sometimes known priori, e.g. gauge chosen known flow desired period. However, finding available variables periods record can also done functions , primarily getTimeseriesList(). one main purposes package; want able query available data.","code":""},{"path":"https://galenholt.github.io/hydrogauge/articles/kiwis-workflow.html","id":"finding-available-variables-and-timespans","dir":"Articles","previous_headings":"Querying available data","what":"Finding available variables and timespans","title":"KiWIS workflow","text":"Due search functionality KiWIS interface, can use gauge numbers hydstra, can also search generally. Note also returns large list, primarily due values ts_id ts_name columns, arise various types data aggregations given unique values , rather calculated, hydstra. can visualise time period parameter gauge (limited QA’ed daily means). Availability variable gauge, period record indicated lines. can take advantage search capability ignore gauge numbers entirely, returning sites meeting regex pattern, 'River Murray' station_name. extra_list argument, takes column names names seach pattern item. approach works column, also look “DMQaQc” data Daily Mean aggregation. returnfields argument lets us choose columns return. include ‘coverage’ returnfields get period record. can visualise availability variable gauge (@ref(fig:vars-duration)). Availability variable gauge, color indicating duration record days. available returnfields poorly documented. default returned station_tslist, others can requested. particular, ‘coverage’ needed get period record.","code":"station_tslist <- getTimeseriesList(portal = 'bom', station_no = c('410730', 'A4260505'))  station_tslist #> # A tibble: 200 × 14 #>    station_name    station_no station_id ts_id ts_name ts_unitname ts_unitsymbol #>    <chr>           <chr>      <chr>      <chr> <chr>   <chr>       <chr>         #>  1 River Murray a… A4260505   1617110    2086… Receiv… cubic mete… cumec         #>  2 River Murray a… A4260505   1617110    2086… Harmon… cubic mete… cumec         #>  3 River Murray a… A4260505   1617110    2086… DMQaQc… cubic mete… cumec         #>  4 River Murray a… A4260505   1617110    2086… DMQaQc… meter       m             #>  5 River Murray a… A4260505   1617110    2086… DMQaQc… meter       m             #>  6 River Murray a… A4260505   1617110    2086… Harmon… cubic mete… cumec         #>  7 River Murray a… A4260505   1617110    2086… Harmon… meter       m             #>  8 River Murray a… A4260505   1617110    2086… Receiv… meter       m             #>  9 River Murray a… A4260505   1617110    2086… Combin… meter       m             #> 10 River Murray a… A4260505   1617110    2086… DMQaQc… meter       m             #> # ℹ 190 more rows #> # ℹ 7 more variables: ts_path <chr>, parametertype_id <chr>, #> #   parametertype_name <chr>, stationparameter_name <chr>, from <dttm>, #> #   to <dttm>, database_timezone <chr> station_tslist |>    dplyr::filter(grepl('DMQaQc.Merged.DailyMean.24HR', ts_name)) |>    tidyr::pivot_longer(cols = c(from, to), names_to = 'startend', values_to = 'date') |>  ggplot(aes(y = date, x = station_no, color = parametertype_name)) +   geom_point(position = position_dodge(width = 0.5)) +    geom_line(position = position_dodge(width = 0.5)) +   coord_flip() RM_ts <- getTimeseriesList(portal = 'bom',                            extra_list = list(station_name = 'River Murray*',                                              ts_name = 'DMQaQc.Merged.DailyMean.24HR'),                            returnfields = c('station_no', 'station_name',                                             'ts_name', 'ts_id',                                              'ts_unitname', 'parametertype_name',                                             'coverage'))  RM_ts #> # A tibble: 199 × 9 #>    station_no station_name          ts_name ts_id ts_unitname parametertype_name #>    <chr>      <chr>                 <chr>   <chr> <chr>       <chr>              #>  1 A4260573   River Murray at Wool… DMQaQc… 2107… degree Cel… Water Temperature  #>  2 A4260624   River Murray at Love… DMQaQc… 2118… meter       Water Course Level #>  3 A4260632   River Murray at Temp… DMQaQc… 2121… meter       Water Course Level #>  4 A4260643   River Murray at Habe… DMQaQc… 2124… microsieme… Electrical Conduc… #>  5 A4260507   River Murray at Lock… DMQaQc… 2087… meter       Water Course Level #>  6 A4260509   River Murray at Lock… DMQaQc… 2087… microsieme… Electrical Conduc… #>  7 A4260521   River Murray at Mann… DMQaQc… 2091… microsieme… Electrical Conduc… #>  8 A4260522   River Murray at Murr… DMQaQc… 2092… meter       Water Course Level #>  9 A4260522   River Murray at Murr… DMQaQc… 2092… degree Cel… Water Temperature  #> 10 A4260532   River Murray at Well… DMQaQc… 2097… meter       Water Course Level #> # ℹ 189 more rows #> # ℹ 3 more variables: from <dttm>, to <dttm>, database_timezone <chr> RM_ts |>    dplyr::mutate(duration = to-from) |>  ggplot(aes(x = parametertype_name, y = station_no, fill = duration)) +   geom_tile() +   scale_fill_viridis_c(option = 'plasma') +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) names(station_tslist)[!names(station_tslist) %in% c('from', 'to', 'database_timezone')] #>  [1] \"station_name\"          \"station_no\"            \"station_id\"            #>  [4] \"ts_id\"                 \"ts_name\"               \"ts_unitname\"           #>  [7] \"ts_unitsymbol\"         \"ts_path\"               \"parametertype_id\"      #> [10] \"parametertype_name\"    \"stationparameter_name\" # According to kisters, these exist   all_return <- c('station_name', 'station_latitude', 'station_longitude', 'station_carteasting', 'station_cartnorthing', 'station_local_x', 'station_local_y', 'station_georefsystem', 'station_longname', 'ts_id', 'ts_name', 'ts_shortname', 'ts_path', 'ts_type_id', 'ts_type_name', 'parametertype_id', 'parametertype_name', 'stationparameter_name', 'stationparameter_no', 'stationparameter_longname', 'ts_unitname', 'ts_unitsymbol', 'ts_unitname_abs', 'ts_unitsymbol_abs', 'site_no', 'site_id', 'site_name', 'catchment_no', 'catchment_id', 'catchment_name', 'coverage', 'ts_density', 'ts_exchange', 'ts_spacing', 'ts_clientvalue##', 'datacart', 'ca_site', 'ca_sta', 'ca_par', 'ca_ts')   # I get http 500 errors unless cut to   sub_return <- all_return[c(1:34, 37:40)]   sub_return #>  [1] \"station_name\"              \"station_latitude\"          #>  [3] \"station_longitude\"         \"station_carteasting\"       #>  [5] \"station_cartnorthing\"      \"station_local_x\"           #>  [7] \"station_local_y\"           \"station_georefsystem\"      #>  [9] \"station_longname\"          \"ts_id\"                     #> [11] \"ts_name\"                   \"ts_shortname\"              #> [13] \"ts_path\"                   \"ts_type_id\"                #> [15] \"ts_type_name\"              \"parametertype_id\"          #> [17] \"parametertype_name\"        \"stationparameter_name\"     #> [19] \"stationparameter_no\"       \"stationparameter_longname\" #> [21] \"ts_unitname\"               \"ts_unitsymbol\"             #> [23] \"ts_unitname_abs\"           \"ts_unitsymbol_abs\"         #> [25] \"site_no\"                   \"site_id\"                   #> [27] \"site_name\"                 \"catchment_no\"              #> [29] \"catchment_id\"              \"catchment_name\"            #> [31] \"coverage\"                  \"ts_density\"                #> [33] \"ts_exchange\"               \"ts_spacing\"                #> [35] \"ca_site\"                   \"ca_sta\"                    #> [37] \"ca_par\"                    \"ca_ts\""},{"path":"https://galenholt.github.io/hydrogauge/articles/kiwis-workflow.html","id":"obtaining-timeseries","dir":"Articles","previous_headings":"","what":"Obtaining timeseries","title":"KiWIS workflow","text":"pull timeseries, need know either ts_id ts_path arguments want. filters columns ensure get timeseries want. Note station_tslist RM_ts row (defined station, variable, aggregation, QA’d, etc) gets ts_id value. need choose ones want. find_ts_id() function helps us find desired ts_id values. wrapper getTimeseriesList() regex select want. , ’s raw API workflow, handy. See wrapper vignette choosing ts_ids, ’re making many decisions make asking hydstra function get_ts_traces() site_list, datasource, var_list, interval, data_type, multiplier. pluses minuses. ’s much harder ask want (see find_ts_ids()), aggregation pre-supplied indexed uniquely ’s much easier get different aggregations different variables one call. Let’s demonstrate ts_id values station_tslist pull daily mean QaQc’ed values level, discharge, water temp. Note ask discharge level separate ts_ids gauge. another argument using find_ts_id(). ’ll just pull one year provides tall dataframe containing additional information gauge (@tbl-ts). returned columns can adjusted returnfields meta_returnfields. Timeseries requested data, available. common use asking period record, show two gauges. use period = 'complete' argument take advantage internal API functionality (also allows period units like ‘P2W’). Timeseries period record discharge. automated approach can simplify common workflows (especially pulling period record many gauges programatically selecting variables across gauges) available fetch_kiwis_timeseries(). See article.","code":"ts_example <- c(   '208669010', '208648010', # level and discharge Lock 9   '1573010', '1598010', # level and discharge Cotter R.   '380167010'   ) ts_example <- getTimeseriesValues(portal = 'bom',                                   ts_id = ts_example,                                   start_time = 20100101,                                   end_time = 20101231) # rows.print doesn't really work with devtools::build_readme(), so use head head(ts_example, 30) #> # A tibble: 30 × 14 #>    ts_id     station_name  station_latitude station_longitude parametertype_name #>    <chr>     <chr>         <chr>            <chr>             <chr>              #>  1 208648010 River Murray… \"\"               \"\"                Water Course Disc… #>  2 208648010 River Murray… \"\"               \"\"                Water Course Disc… #>  3 208648010 River Murray… \"\"               \"\"                Water Course Disc… #>  4 208648010 River Murray… \"\"               \"\"                Water Course Disc… #>  5 208648010 River Murray… \"\"               \"\"                Water Course Disc… #>  6 208648010 River Murray… \"\"               \"\"                Water Course Disc… #>  7 208648010 River Murray… \"\"               \"\"                Water Course Disc… #>  8 208648010 River Murray… \"\"               \"\"                Water Course Disc… #>  9 208648010 River Murray… \"\"               \"\"                Water Course Disc… #> 10 208648010 River Murray… \"\"               \"\"                Water Course Disc… #> # ℹ 20 more rows #> # ℹ 9 more variables: ts_name <chr>, ts_unitname <chr>, ts_unitsymbol <chr>, #> #   station_no <chr>, station_id <chr>, value <dbl>, quality_code <int>, #> #   time <dttm>, database_timezone <chr> ts_example |>    ggplot(aes(x = time, y = value, color = parametertype_name)) +   geom_line() +   facet_grid(parametertype_name ~ station_name, scales = 'free', labeller = label_wrap_gen(10)) ts_all <- getTimeseriesValues(portal = 'bom',                                   ts_id = c('208648010', '1573010'),                                   period = 'complete') ts_all |>    # dplyr::filter(value >= 0) |>    ggplot(aes(x = time, y = value, color = station_name)) +   geom_line() +   facet_grid(station_name ~ ., scales = 'free', labeller = label_wrap_gen(10)) +   theme(legend.position = 'none') #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://galenholt.github.io/hydrogauge/articles/kiwis-wrapper.html","id":"period-of-record","dir":"Articles","previous_headings":"","what":"Period of record","title":"KiWIS wrapper","text":"function useful want pull period record variable set gauges, especially want choose variable name ts_id code. example, might want pull discharge period record. define period record passing '' start_time end_time, period = 'complete'. can choose daily mean discharge ML/d variable = 'discharge', units = 'ML/d', statistic = 'mean', yielding @ref(fig:discharge-period). Choosing ts_id codes variable, units, statistic datatype uses regex find_ts_id(), guaranteed yield one one result. can handy, can use wildcards, also can lead extra data sneaking (e.g. 9am midnight daily start times). Check data carefully extra variables duplication. large calls, good idea run find_ts_id() manually check output surprises pulling timeseries. Discharge period record three gauges. use extra_list lets us use regex select gauges, well pre-select desired data limiting gets returned find_ts_id() (’*24HR’ limits daily start use). Many report cumecs, ML/d. Discharge period record gauges starting ‘River Murray’.","code":"discharge_record <- fetch_kiwis_timeseries(portal = 'bom',                                            gauge = c('410730', 'A4260505'),                                            period = 'complete',                                            variable = 'discharge',                                             units = 'ML/d',                                            timeunit = 'Daily',                                             statistic = 'mean',                                            datatype = 'QaQc') #> Loading required package: foreach #> Loading required package: future discharge_record |>    ggplot(aes(x = time, y = value, color = station_name)) +   geom_line()  +   facet_grid(station_name ~ ., scales = 'free', labeller = label_wrap_gen(10)) +   theme(legend.position = 'none') #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_line()`). murray_discharge <- fetch_kiwis_timeseries(portal = 'bom',                                            extra_list = list(station_name = 'River Murray*',                                                              ts_name = '*24HR'),                                            period = 'complete',                                            variable = 'discharge',                                             units = 'cumec',                                            timeunit = 'Daily',                                             statistic = 'mean',                                            datatype = 'QaQc') murray_discharge |>    ggplot(aes(x = time, y = value, color = station_no)) +   geom_line()  +   facet_grid(station_no ~ ., scales = 'free', labeller = label_wrap_gen(10)) +   theme(legend.position = 'none') #> Warning: Removed 34 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://galenholt.github.io/hydrogauge/articles/kiwis-wrapper.html","id":"multiple-variables","dir":"Articles","previous_headings":"","what":"Multiple variables","title":"KiWIS wrapper","text":"Unlike fetch_hydstra_timeseries(), don’t need worry misaggregating different variables , aggregation ts_id. hand, selection ts_ids uses regex , can’t use matched vectors get different aggregations different variables (though may happen aggregation isn’t available variables, e.g. daily mean rainfall). Instead, pass regex, let choose , check output carefully, potentially deleting unwanted data. make separate calls, tend safer. pattern can useful variables well, allowing us choose multiple time periods results (@ref(fig:multi-var)) exemplify benefits pitfalls. get two Daily Mean Daily Total results shifted, one 9am midnight. though get Daily Monthly aggregations discharge rainfall one call. clean 9/midnight duplication using datatype = c('QaQc.*09', 'QaQc.*Month'), illustration warranted. Multiple variables, time periods, aggregations.","code":"multi_ts <- fetch_kiwis_timeseries(portal = 'bom',                                    gauge = c('410730', 'A4260505'),                                    variable = c('discharge', 'Rainfall'),                                    units = c('cumec', 'mm'),                                    timeunit = c('Daily', 'Monthly'),                                    statistic = c('Mean', 'Total'),                                    datatype = c('QaQc'),                                    # If I want monthly to return, need to cross a month boundary.                                    start_time = '2019-12-01 01:30:30',                                    end_time = '20201231') multi_ts |>    dplyr::mutate(ts_name = stringr::str_replace_all(ts_name, '\\\\.', ' '),                 ts_name = stringr::str_remove_all(ts_name, 'DMQaQc Merged')) |>    ggplot(aes(x = time, y = value, color = parametertype_name)) +   geom_line()  +   facet_grid(ts_name ~ station_no, scales = 'free', labeller = label_wrap_gen(10))"},{"path":"https://galenholt.github.io/hydrogauge/articles/kiwis-wrapper.html","id":"obtaining-ts_ids","dir":"Articles","previous_headings":"","what":"Obtaining ts_ids","title":"KiWIS wrapper","text":"key pulling KiWIS records use either ts_id ts_path. ts_path can theoretically constructed fly, tricky generalise get right. Instead, tend use ts_id, finding regex columns. key culling full set potential timeseries returned getTimeseriesList() desired set pull. Even using base API, looking ts_ids gauge, variable, aggregation, etc can slow error-prone. Instead, find_ts_id() gives interface search dataframe, filtering according set desired timeseries. done internally fetch_kiwis_timeseries(), can also useful manually searching available desired timeseries pull. example, pre-check find_ts_id(), found duplication : determined needed change request get clean call","code":"ts_check <- find_ts_id(portal = 'bom',            gauge = c('410730', 'A4260505'),            variable = c('discharge', 'Rainfall'),            units = c('cumec', 'mm'),            timeunit = c('Daily', 'Monthly'),            statistic = c('Mean', 'Total'),            datatype = c('QaQc'))  ts_check |>    dplyr::select(station_no, ts_id, ts_name, ts_unitname, parametertype_name, everything()) |>    dplyr::arrange(station_no, parametertype_name, ts_name) #> # A tibble: 9 × 14 #>   station_no ts_id     ts_name       ts_unitname parametertype_name station_name #>   <chr>      <chr>     <chr>         <chr>       <chr>              <chr>        #> 1 410730     1555010   DMQaQc.Merge… millimeter  Rainfall           Cotter R. a… #> 2 410730     1554010   DMQaQc.Merge… millimeter  Rainfall           Cotter R. a… #> 3 410730     1556010   DMQaQc.Merge… millimeter  Rainfall           Cotter R. a… #> 4 410730     1572010   DMQaQc.Merge… cubic mete… Water Course Disc… Cotter R. a… #> 5 410730     1573010   DMQaQc.Merge… cubic mete… Water Course Disc… Cotter R. a… #> 6 410730     1574010   DMQaQc.Merge… cubic mete… Water Course Disc… Cotter R. a… #> 7 A4260505   208647010 DMQaQc.Merge… cubic mete… Water Course Disc… River Murra… #> 8 A4260505   208648010 DMQaQc.Merge… cubic mete… Water Course Disc… River Murra… #> 9 A4260505   208649010 DMQaQc.Merge… cubic mete… Water Course Disc… River Murra… #> # ℹ 8 more variables: station_id <chr>, ts_unitsymbol <chr>, ts_path <chr>, #> #   parametertype_id <chr>, stationparameter_name <chr>, from <chr>, to <chr>, #> #   database_timezone <chr> ts_check_clean <- find_ts_id(portal = 'bom',            gauge = c('410730', 'A4260505'),            variable = c('discharge', 'Rainfall'),            units = c('cumec', 'mm'),            timeunit = c('Daily', 'Monthly'),            statistic = c('Mean', 'Total'),            datatype = c('QaQc.*09', 'QaQc.*Month'))  ts_check_clean |>    dplyr::select(station_no, ts_id, ts_name, ts_unitname, parametertype_name, everything()) |>    dplyr::arrange(station_no, parametertype_name, ts_name) #> # A tibble: 6 × 14 #>   station_no ts_id     ts_name       ts_unitname parametertype_name station_name #>   <chr>      <chr>     <chr>         <chr>       <chr>              <chr>        #> 1 410730     1555010   DMQaQc.Merge… millimeter  Rainfall           Cotter R. a… #> 2 410730     1556010   DMQaQc.Merge… millimeter  Rainfall           Cotter R. a… #> 3 410730     1572010   DMQaQc.Merge… cubic mete… Water Course Disc… Cotter R. a… #> 4 410730     1574010   DMQaQc.Merge… cubic mete… Water Course Disc… Cotter R. a… #> 5 A4260505   208647010 DMQaQc.Merge… cubic mete… Water Course Disc… River Murra… #> 6 A4260505   208649010 DMQaQc.Merge… cubic mete… Water Course Disc… River Murra… #> # ℹ 8 more variables: station_id <chr>, ts_unitsymbol <chr>, ts_path <chr>, #> #   parametertype_id <chr>, stationparameter_name <chr>, from <chr>, to <chr>, #> #   database_timezone <chr>"},{"path":"https://galenholt.github.io/hydrogauge/articles/kiwis-wrapper.html","id":"large-requests","dir":"Articles","previous_headings":"","what":"Large requests","title":"KiWIS wrapper","text":"Note: big pulls, can useful use find_ts_id() getTimeseriesValues() approach, least manual check find_ts_id() prior using fetch_kiwis_timeseries(). experience, often errors gauges issues mean clean pulls need troubleshooting variable availability etc. often easiest find solve problems check ’re actually trying pull.","code":""},{"path":"https://galenholt.github.io/hydrogauge/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Galen Holt. Author, maintainer.","code":""},{"path":"https://galenholt.github.io/hydrogauge/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Holt G (2025). hydrogauge: Pulls information Kisters Kiwis Hydstra APIs. R package version 0.1.1.9010, https://galenholt.github.io/hydrogauge/, https://github.com/galenholt/hydrogauge/.","code":"@Manual{,   title = {hydrogauge: Pulls information from the Kisters Kiwis and Hydstra APIs},   author = {Galen Holt},   year = {2025},   note = {R package version 0.1.1.9010, https://galenholt.github.io/hydrogauge/},   url = {https://github.com/galenholt/hydrogauge/}, }"},{"path":[]},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"hydrogauge designed query Kisters Hydstra (hydllp) Kisters WISKI/KiWIS water gauge APIs. complete API coverage, tries expose many gauge-pulling packages. Please leave functionality requests github issues.","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"can install development version hydrogauge GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"galenholt/hydrogauge\")"},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"package originally conceived enable workflow querying discover data availability (variables, time spans, locations), followed pulling data based findings. differs , tailored, approaches e.g. pulling flow gauges specific location, trading querying ability ease use. hydrogauge attempts smooth tradeoff providing set core functions give user access API functionality using syntax close API documentation possible, well set wrapper functions attempt make common use-cases easier avoid need dig API documentation. package originally designed query various Australian state water gauge networks Australian Bureau Meteorology (BoM) APIs. Australian states use Kisters Hydstra (hydllp) BoM uses Kisters WISKI/KiWIS. Thus, package best-tested agains Australian data sources, likely work many services use APIs simple change URL (argument portal).","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"api-and-wrapper-functions","dir":"","previous_headings":"Background","what":"API and wrapper functions","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"core functions try stay close possible simple translations arguments R Kisters formats, output JSON back R. approach lets us get closer exposing full functionality makes clearer mapping Kisters documentation. goal expose much functionality possible avoid making many decisions user. hydrogauge provides convenience functions (primarly fetch_timeseries, fetch_kiwis_timeseries, fetch_hydstra_timeseries) automate workflow (querying period record pulling range). recent inclusion BoM gauges WISKi/KiWIS format, likely harmonized wrapper functions developed allow calling types databases arguments returning equivalent outputs. Caveat: functionality provided maps closely possible underlying API calls, functionality complete. package complete coverage available API calls arguments, active development add missing capabilities. Initial focus identifying available pull pulling timeseries, along including new data portals.","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"supported-sources","dir":"","previous_headings":"Background","what":"Supported sources","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"Users can input url KiWIS HYDSTRA (hydllp) portal, also can called name (case sensitive): ‘vic’: Victorian water data (API url https://data.water.vic.gov.au/WMIS/cgi/webservice.exe?) ‘nsw’ : New South Wales water data (API url https://realtimedata.waternsw.com.au/cgi/webservice.exe?) ‘qld’: Queensland water data (API url https://water-monitoring.information.qld.gov.au/cgi/webservice.exe?) ‘bom’: Australian Bureau Meteorology (API url http://www.bom.gov.au/waterdata/services) Australian states progress haven’t looked thoroughly; moment, use BoM fallback don’t know API urls. WA seems use HYDSTRA, API url hasn’t found yet. Unclear SA using backend, packages (e.g. python mdba-gauge-getter) use BOM SA. Tasmania NT maps look lot like BoM ’re outside Australia, just use URL. Create issue (pull request) add named portals. Kisters website provides list sites likely work functions, may take work find correct API url, list untested.","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"useful-api-documentation","dir":"","previous_headings":"","what":"Useful API documentation","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"base functions directly access two APIs, argument names close possible used Kisters. Thus, API documentation can useful understanding calls (identifying -yet-developed functionality hydrogauge).","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"hydstra","dir":"","previous_headings":"Useful API documentation","what":"HYDSTRA","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"tried keep function argument names API, API restricts options function arguments. API functions documented Kisters (creators), bit information options Queensland, though discrepancies states.","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"wiskikiwis","dir":"","previous_headings":"Useful API documentation","what":"WISKI/KiWIS","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"documentation ’ve found Scottish Environment Protection Agency; found good docs straight Kisters. Kisters docs seem available SEPA though. provide information available functions, allowed variables request, etc. good SEPA walkthrough. Unlike Hydstra, provides tailored arguments different sorts API control, KiWIS primarily uses text search within columns. can flexible, means need know column names pay close attention regex used filter columns avoid contaminating outputs.","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"similar-packages","dir":"","previous_headings":"","what":"Similar packages","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"bomWater kiwisR packages much functionality needed call BoM API, targeted Australia (bomWater) generally (kiwisR). learned lot , chosen reimplement BoM work neither quite needed workflow without convoluted. similar python packages mdba-gauge-getter, calls state BoM, bomwater, BoM interface. tailored flow stage timeseries, less emphasis identifying available data exposing API funcationality. obvious missing piece USGS gauges. USGS provides -house dataRetrieval package. present, explored wrapping doubt make sense, given existing tool.","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"done much systematic testing speed big requests (long periods record lots sites variables). working optimizing API calls. ’s certainly possible overflow memory ask everything sites.","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"development-plans","dir":"","previous_headings":"","what":"Development plans","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"package active development, put github soon main functionality (get_ts_traces) working. current high-priority next steps : helpful wrapper functions automatically detect pull data Especially across hydstra KiWIS Selecting finding sites based criteria Especially geographic Diagnostic plots data inspection, though general made user Smarter/faster handling multiple calls (optimising API calling)","code":""},{"path":"https://galenholt.github.io/hydrogauge/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Pulls information from the Kisters Kiwis and Hydstra APIs","text":"Please submit issues GitHub Galen Holt, g.holt@deakin.edu.au","code":""},{"path":"https://galenholt.github.io/hydrogauge/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 hydrogauge authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/api_error_catch.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle and parse errors from the API calls — api_error_catch","title":"Handle and parse errors from the API calls — api_error_catch","text":"Handle parse errors API calls","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/api_error_catch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle and parse errors from the API calls — api_error_catch","text":"","code":"api_error_catch(bodylist, call = rlang::caller_env(), .errorhandling = \"stop\")"},{"path":"https://galenholt.github.io/hydrogauge/reference/api_error_catch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle and parse errors from the API calls — api_error_catch","text":"bodylist list returned API call see rlang::abort(); passes calling environment clearer messages .errorhandling foreach::foreach()- passed handle simply aborting vs something error continuing","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/api_error_catch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle and parse errors from the API calls — api_error_catch","text":"depends presence errors value .errorhandling","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/clean_bom_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean the raw output from the BOM getTimeseriesValue call — clean_bom_timeseries","title":"Clean the raw output from the BOM getTimeseriesValue call — clean_bom_timeseries","text":"takes single list, multiple ts_ids extracted, looped , e.g. purrr::map().","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/clean_bom_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean the raw output from the BOM getTimeseriesValue call — clean_bom_timeseries","text":"","code":"clean_bom_timeseries(x, return_timezone = \"UTC\")"},{"path":"https://galenholt.github.io/hydrogauge/reference/clean_bom_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean the raw output from the BOM getTimeseriesValue call — clean_bom_timeseries","text":"x response list return_timezone character OlsonNames(). Default 'UTC'. 'db_default', uses API default. BOM defaults +10","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/clean_bom_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean the raw output from the BOM getTimeseriesValue call — clean_bom_timeseries","text":"tibble","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/clean_trace_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans ts_trace API list body into tibble — clean_trace_list","title":"Cleans ts_trace API list body into tibble — clean_trace_list","text":"Cleans ts_trace API list body tibble","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/clean_trace_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans ts_trace API list body into tibble — clean_trace_list","text":"","code":"clean_trace_list(   responsebody,   data_type,   gauge = NA,   return_timezone = \"UTC\",   .errorhandling = \"stop\" )"},{"path":"https://galenholt.github.io/hydrogauge/reference/clean_trace_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans ts_trace API list body into tibble — clean_trace_list","text":"responsebody response body API call get_ts_traces data_type data_type used calculate statistic interval, glued record gauge character gauge name- allows building informative error-handled output return_timezone character OlsonNames() one three special cases: 'db_default', 'char' 'raw'. Default 'UTC'. 'db_default', uses API default. 'char', returns string format 'YYYY-MM-DDTHH:MM:SS+TZ', needed info (matching Kiwis returns). 'raw', returns time column -API (14-digit string numbers 'YYYMMDDHHMMSS') \"sxvlist\" returns list separate tibble site x variable combination .errorhandling foreach::foreach() (handled api_error_catch()) Default 'stop'. Made available primarily use 'pass' big requests die due API errors. careful- errors just get passed data missing.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/clean_trace_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans ts_trace API list body into tibble — clean_trace_list","text":"tibble rectangled response","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/extract_timezone.html","id":null,"dir":"Reference","previous_headings":"","what":"Get timezones from various formats — extract_timezone","title":"Get timezones from various formats — extract_timezone","text":"Get timezones various formats","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/extract_timezone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get timezones from various formats — extract_timezone","text":"","code":"extract_timezone(x)"},{"path":"https://galenholt.github.io/hydrogauge/reference/extract_timezone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get timezones from various formats — extract_timezone","text":"x vector tz info, either times included tz","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/extract_timezone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get timezones from various formats — extract_timezone","text":"vector OlsonName timezones possible","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_from_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches timeseries from a table of arguments — fetch_from_table","title":"Fetches timeseries from a table of arguments — fetch_from_table","text":"Fetches timeseries table arguments","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_from_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches timeseries from a table of arguments — fetch_from_table","text":"","code":"fetch_from_table(request_table, clean = TRUE)"},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_from_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches timeseries from a table of arguments — fetch_from_table","text":"request_table data.frame columns c('portal', 'gauge', 'start_time', 'end_time', 'variable', 'units', 'timeunit', 'statistic', 'datatype') clean whether clean output standard set columns, leave -returned","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_from_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches timeseries from a table of arguments — fetch_from_table","text":"dataframe timeseries","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_hydstra_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for Hydstra/hydllp to find and return desired timeseries — fetch_hydstra_timeseries","title":"Wrapper for Hydstra/hydllp to find and return desired timeseries — fetch_hydstra_timeseries","text":"wraps get_variable_list() get_ts_traces(), allowing bit automation bit flexibility get_ts_traces(), currently slower due API network overhead. loops distinct site variable asking , allows us tailor requests bit . approach allows us useful things, though always time. can ask \"\" var_type, start_time, end_time, query available data get . can also ask different data_type (statistic function clarity) different variables var_type, important, though happen along var_type = \"\". likely speedups can combine requests, possibility future development allowing feeding pre-prepared table arguments.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_hydstra_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for Hydstra/hydllp to find and return desired timeseries — fetch_hydstra_timeseries","text":"","code":"fetch_hydstra_timeseries(   portal,   gauge,   datasource = \"A\",   var_list = NULL,   variable = NULL,   units = NULL,   timeunit = \"day\",   statistic = \"mean\",   start_time,   end_time,   multiplier = 1,   ignore_fromderived = TRUE,   returnformat = \"df\",   request_timezone = \"db_default\",   return_timezone = \"UTC\",   .errorhandling = \"pass\" )"},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_hydstra_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for Hydstra/hydllp to find and return desired timeseries — fetch_hydstra_timeseries","text":"portal character data portal (case insensitive). Default 'victoria' gauge character vector gauge numbers, site_list Hydstra functions (station_no Kiwis functions) datasource character datasource code. knowledge, options \"\", \"TELEM\", \"TELEMCOPY\". Passing multiple currently supported. var_list get_ts_traces(), can also take \"\" get available variables site site_list. '', overrides variable units, though using var_list always dangerous. variable allows searching variable name, e.g. 'discharge' grepl fetch_kiwis_timeseries() units allows searching units variable, e.g. 'ML/d' grepl fetch_kiwis_timeseries() timeunit interval get_ts_traces(). Name changed consistency interpretation. statistic data_type get_ts_traces(). Name changed consistency interpretation. Can single character vector length var_list. single value, behaves get_ts_traces(), applying function variables. vector, applies given function variable matching position var_list. allows us ask many variables might need different statistics. Note- var_list = \"\", way match since variables unknown may change sits, statistic single function. start_time get_ts_traces(), can also take \"\" start first timepoint variable var_list site site_list end_time get_ts_traces(), can also take \"\" end last timepoint variable var_list site site_list multiplier character, interval multiplier. think allows intervals like 5 days, passing interval = 'day' multiplier = 5. tested 1 present. ignore_fromderived logical, default TRUE. Sometimes derived variable (140, 141) also available var_from, seemingly usually longer historical record. TRUE (default) ignores , uses just e.g. var_from = 100, var_to = 140. FALSE returns sets, e.g. records derived variable var_to. FALSE, look output carefully, often strange returnformat character, one \"df\" returns tibble \"varlist\" returns list separate tibble variable (may multiple sites per tibble) \"sitelist\" returns list separate tibble site (may multiple variables per tibble) request_timezone ignored start_time end_time time objects, otherwise timezone OlsonNames() 'db_default' return_timezone character OlsonNames() one three special cases: 'db_default', 'char' 'raw'. Default 'UTC'. 'db_default', uses API default. 'char', returns string format 'YYYY-MM-DDTHH:MM:SS+TZ', needed info (matching Kiwis returns). 'raw', returns time column -API (14-digit string numbers 'YYYMMDDHHMMSS') \"sxvlist\" returns list separate tibble site x variable combination .errorhandling foreach::foreach() (handled api_error_catch()) Default 'stop'. Made available primarily use 'pass' big requests die due API errors. careful- errors just get passed data missing.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_hydstra_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for Hydstra/hydllp to find and return desired timeseries — fetch_hydstra_timeseries","text":"tibble requested timeseries","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_kiwis_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for Kiwis to find and return desired timeseries — fetch_kiwis_timeseries","title":"Wrapper for Kiwis to find and return desired timeseries — fetch_kiwis_timeseries","text":"Wraps getTimeseriesList() (via find_ts_id()) getTimeseriesValues() find ts_id matches sort timeseries want go get () help arguments, run ts_list <- getTimeseriesList(portal = portal, station_no = gauge) see getTimeseriesList() output parsed give ts_id. can helpful getting incorrect records many enough. argument says column filters , using grepl() ignore.case = TRUE","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_kiwis_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for Kiwis to find and return desired timeseries — fetch_kiwis_timeseries","text":"","code":"fetch_kiwis_timeseries(   portal,   gauge = NULL,   start_time = NULL,   end_time = NULL,   period = NULL,   variable = \"discharge\",   units = \"ML/d\",   timeunit = \"Daily\",   statistic = \"Mean\",   datatype = \"QaQc\",   namefilters = NULL,   extra_list = list(NULL),   returnfields = \"default\",   meta_returnfields = \"default\",   request_timezone = \"db_default\",   return_timezone = \"UTC\" )"},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_kiwis_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for Kiwis to find and return desired timeseries — fetch_kiwis_timeseries","text":"portal URL Kisters KiWIS database. gauge character vector gauge numbers, station_no Kiwis functions (site_list Hydstra) start_time character date date time start database default timezone. Default NULL. end_time character date date time end database default timezone. Default NULL. period character, default NULL. special case 'complete' returns full set data. Otherwise, beginning 'P', followed numbers characers indicating timespan, e.g. 'P2W'. See documentation. variable character vector variables want extract. Matches parametertype_name units units variable, used may > 1 e.g. cumecs, ML/d discharge. NULL, gets available. Matches ts_unitsymbol timeunit time interval request, e.g. \"Daily\", default. Main values seem 'Daily', 'Monthly', 'Yearly', 'AsStored' (raw data). Matches part ts_name statistic aggregation statistic, e.g. \"Mean\", default. Main values seem 'Mean', 'Max', 'Min', 'Total', though available variable- rainfall tends use Total, discharge tends use mean, max, min. Matches part ts_name datatype type data return, default 'QaQc'. options seem 'Recieved', 'Harmonised', 'Obs'. Note- 'QaQc' matches 'DMQaQc' 'PR01QaQc'. many cases one available, get 2x much data, check specify want. Matches part ts_name namefilters character vector giving ability match parts ts_name case specified timeunit, statistic, datatype sufficient find desired ts_id. One frequent occurrence two Daily datasets differ whether split 9am midnight, case use either namefilters = '09HR namefilters = '24HR. situations, can easier using regex, e.g.  datatype = 'QaQc.*09' extra_list named list, see getStationList(), special note can include 'timezone' argument determines timezone API returns . dangerous, since API ingests dates default timezone inferred return absence ability extract . Thus, including timezone extra_list may yield unexpected outcomes requesting dates. better option use return_timezone adjust return values. said, may databases return gauge-local tzs, allowed concatenated. solution just work UTC timezone = 'UTC' extralist make outputs tz. returnfields return fields data . Default c('Timestamp', 'Value', 'Quality Code'). Full list Kisters docs) meta_returnfields return fields variable site. seems able access getTimeseriesList() returnfields. Full list Kisters docs) request_timezone ignored start_time end_time time objects, otherwise timezone OlsonNames() 'db_default' return_timezone character OlsonNames() one three special cases: 'db_default', 'char' 'raw'. Default 'UTC'. 'db_default', uses API default. BOM defaults +10. 'char' 'raw', returns time column -API (string format 'YYYY-MM-DDTHH:MM:SS+TZ')","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_kiwis_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for Kiwis to find and return desired timeseries — fetch_kiwis_timeseries","text":"tibble requested timeseries","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_kiwis_timeseries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper for Kiwis to find and return desired timeseries — fetch_kiwis_timeseries","text":"Note filtering arguments variable, units, timeunit, statistic, datatype can vectors, positionally matched. just done simple , example variable = 'discharge', units = c('ML/d', 'cumecs'), statistic = c('Mean', 'Min'), get mean min ML/d cumecs, mean ML/d min cumecs. control, run multiple times desired subsets. , use grepl() allows full regex parsing. example, many gauges daily values split 09:00 midnight. Using datatype = 'QaQc.*09' gets just 09:00 versions.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch timeseries across formats — fetch_timeseries","title":"Fetch timeseries across formats — fetch_timeseries","text":"Experimental, accepts single variable now (one type timeseries). Handles gauges portals different ways, fully developed. Mostly lot translating hydstra kiwis allow symmetric specification.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch timeseries across formats — fetch_timeseries","text":"","code":"fetch_timeseries(   portal,   gauge,   start_time,   end_time,   variable,   units,   timeunit,   statistic,   datatype,   portal_type = \"auto\",   gauge_portal = \"auto\",   request_timezone = \"db_default\",   return_timezone = \"UTC\",   robustness = \"robust\",   check_output = TRUE )"},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch timeseries across formats — fetch_timeseries","text":"portal URL Kisters KiWIS database. gauge character vector gauge numbers, station_no Kiwis functions (site_list Hydstra) start_time character date date time start database default timezone. Default NULL. end_time character date date time end database default timezone. Default NULL. variable character vector variables want extract. Matches parametertype_name units units variable, used may > 1 e.g. cumecs, ML/d discharge. NULL, gets available. Matches ts_unitsymbol timeunit time interval request, e.g. \"Daily\", default. Main values seem 'Daily', 'Monthly', 'Yearly', 'AsStored' (raw data). Matches part ts_name statistic aggregation statistic, e.g. \"Mean\", default. Main values seem 'Mean', 'Max', 'Min', 'Total', though available variable- rainfall tends use Total, discharge tends use mean, max, min. Matches part ts_name datatype fetch_kiwis_timeseries(), datasource argument hydstra, e.g. fetch_hydstra_timeseries() portal_type want either able pass vector length portal 'auto' gauge_portal want either able pass named list length portal tibble portal gauge columns, 'auto' best auto-detecting. request_timezone ignored start_time end_time time objects, otherwise timezone OlsonNames() 'db_default' return_timezone character OlsonNames() one three special cases: 'db_default', 'char' 'raw'. Default 'UTC'. 'db_default', uses API default. BOM defaults +10. 'char' 'raw', returns time column -API (string format 'YYYY-MM-DDTHH:MM:SS+TZ') robustness experimental, always set 'robust'. Intention another option reduce API calls opportunity error check_output logical, default TRUE- inform duplicated gauges across portals missing gauges","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fetch_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch timeseries across formats — fetch_timeseries","text":"timeseries dataframe","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/find_hydstra_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a set of requests to make from hydstra — find_hydstra_request","title":"Get a set of requests to make from hydstra — find_hydstra_request","text":"Similar find_ts_id() Kiwis spirit","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/find_hydstra_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a set of requests to make from hydstra — find_hydstra_request","text":"","code":"find_hydstra_request(   portal,   gauge,   datasource = \"A\",   var_list = NULL,   variable = NULL,   units = NULL,   statistic = \"mean\",   timeunit = \"day\",   multiplier = 1,   warnmissing = TRUE,   ignore_fromderived = TRUE )"},{"path":"https://galenholt.github.io/hydrogauge/reference/find_hydstra_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a set of requests to make from hydstra — find_hydstra_request","text":"portal character data portal (case insensitive). Default 'victoria' gauge character vector gauge numbers, site_list Hydstra functions (station_no Kiwis functions) datasource character datasource code. knowledge, options \"\", \"TELEM\", \"TELEMCOPY\". Passing multiple currently supported. var_list get_ts_traces(), can also take \"\" get available variables site site_list. '', overrides variable units, though using var_list always dangerous. variable allows searching variable name, e.g. 'discharge' grepl fetch_kiwis_timeseries() units allows searching units variable, e.g. 'ML/d' grepl fetch_kiwis_timeseries() statistic data_type get_ts_traces(). Name changed consistency interpretation. Can single character vector length var_list. single value, behaves get_ts_traces(), applying function variables. vector, applies given function variable matching position var_list. allows us ask many variables might need different statistics. Note- var_list = \"\", way match since variables unknown may change sits, statistic single function. timeunit interval get_ts_traces(). Name changed consistency interpretation. multiplier character, interval multiplier. think allows intervals like 5 days, passing interval = 'day' multiplier = 5. tested 1 present. warnmissing warns gauge missing. TRUE default, able silenced programmatic use. ignore_fromderived logical, default TRUE. Sometimes derived variable (140, 141) also available var_from, seemingly usually longer historical record. TRUE (default) ignores , uses just e.g. var_from = 100, var_to = 140. FALSE returns sets, e.g. records derived variable var_to. FALSE, look output carefully, often strange","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/find_hydstra_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a set of requests to make from hydstra — find_hydstra_request","text":"tibble, row information needed Hydstra request","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/find_ts_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to extract ts_id for desired variables from getTimeseriesList() — find_ts_id","title":"Helper to extract ts_id for desired variables from getTimeseriesList() — find_ts_id","text":"Helper extract ts_id desired variables getTimeseriesList()","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/find_ts_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to extract ts_id for desired variables from getTimeseriesList() — find_ts_id","text":"","code":"find_ts_id(   portal,   gauge,   variable = \"discharge\",   units = \"ML/d\",   timeunit = \"Daily\",   statistic = \"Mean\",   datatype = \"QaQc\",   namefilters = NULL,   extra_list = list(NULL),   return_timezone = \"char\" )"},{"path":"https://galenholt.github.io/hydrogauge/reference/find_ts_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to extract ts_id for desired variables from getTimeseriesList() — find_ts_id","text":"portal URL Kisters KiWIS database. gauge character vector gauge numbers, station_no Kiwis functions (site_list Hydstra) variable character vector variables want extract. Matches parametertype_name units units variable, used may > 1 e.g. cumecs, ML/d discharge. NULL, gets available. Matches ts_unitsymbol timeunit time interval request, e.g. \"Daily\", default. Main values seem 'Daily', 'Monthly', 'Yearly', 'AsStored' (raw data). Matches part ts_name statistic aggregation statistic, e.g. \"Mean\", default. Main values seem 'Mean', 'Max', 'Min', 'Total', though available variable- rainfall tends use Total, discharge tends use mean, max, min. Matches part ts_name datatype type data return, default 'QaQc'. options seem 'Recieved', 'Harmonised', 'Obs'. Note- 'QaQc' matches 'DMQaQc' 'PR01QaQc'. many cases one available, get 2x much data, check specify want. Matches part ts_name namefilters character vector giving ability match parts ts_name case specified timeunit, statistic, datatype sufficient find desired ts_id. One frequent occurrence two Daily datasets differ whether split 9am midnight, case use either namefilters = '09HR namefilters = '24HR. situations, can easier using regex, e.g.  datatype = 'QaQc.*09' extra_list named list, see getStationList(), special note can include 'timezone' argument determines timezone API returns . dangerous, since API ingests dates default timezone inferred return absence ability extract . Thus, including timezone extra_list may yield unexpected outcomes requesting dates. better option use return_timezone adjust return values. said, may databases return gauge-local tzs, allowed concatenated. solution just work UTC timezone = 'UTC' extralist make outputs tz. return_timezone character OlsonNames() one three special cases: 'db_default', 'char' 'raw'. Default 'UTC'. 'db_default', uses API default. BOM defaults +10. 'char' 'raw', returns time column -API (string format 'YYYY-MM-DDTHH:MM:SS+TZ')","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/find_ts_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to extract ts_id for desired variables from getTimeseriesList() — find_ts_id","text":"tibble matching ts_ids, along columns","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fix_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates 14-digit character string needed for times in the API — fix_times","title":"Creates 14-digit character string needed for times in the API — fix_times","text":"Creates 14-digit character string needed times API","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fix_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates 14-digit character string needed for times in the API — fix_times","text":"","code":"fix_times(usertime, type = \"hydstra\")"},{"path":"https://galenholt.github.io/hydrogauge/reference/fix_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates 14-digit character string needed for times in the API — fix_times","text":"usertime time value user. may date, numeric, character","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/fix_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates 14-digit character string needed for times in the API — fix_times","text":"14-digit character vector","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/format_chartimes.html","id":null,"dir":"Reference","previous_headings":"","what":"turns 14-character time string into 'YYYY-MM-DDTHH:MM:SS' — format_chartimes","title":"turns 14-character time string into 'YYYY-MM-DDTHH:MM:SS' — format_chartimes","text":"turns 14-character time string 'YYYY-MM-DDTHH:MM:SS'","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/format_chartimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"turns 14-character time string into 'YYYY-MM-DDTHH:MM:SS' — format_chartimes","text":"","code":"format_chartimes(t14)"},{"path":"https://galenholt.github.io/hydrogauge/reference/format_chartimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"turns 14-character time string into 'YYYY-MM-DDTHH:MM:SS' — format_chartimes","text":"t14","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/format_chartimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"turns 14-character time string into 'YYYY-MM-DDTHH:MM:SS' — format_chartimes","text":"character format 'YYYY-MM-DDTHH:MM:SS'","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getGroupList.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets groups in the database — getGroupList","title":"Gets groups in the database — getGroupList","text":"Closest Hydstra get_groups(), neither seem particularly useful. Might make getStationList(), getTimeseriesList() getTimeseriesValues() easier, though obviously much. Note 'group identifiers returned group_id specified getStationList, getTimeseriesList, getTimeseriesValues, getTimeseriesValueLayer stationgroup_id, parametergroup_id timeseriesgroup_id' per docs","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getGroupList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets groups in the database — getGroupList","text":"","code":"getGroupList(portal)"},{"path":"https://galenholt.github.io/hydrogauge/reference/getGroupList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets groups in the database — getGroupList","text":"portal URL Kisters KiWIS database.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getGroupList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets groups in the database — getGroupList","text":"tibble","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getParameterList.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to the getParameterList function — getParameterList","title":"Interface to the getParameterList function — getParameterList","text":"unclear exists, returns subset getStationList().","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getParameterList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to the getParameterList function — getParameterList","text":"","code":"getParameterList(   portal,   station_no = NULL,   returnfields = \"all\",   extra_list = list(NULL) )"},{"path":"https://galenholt.github.io/hydrogauge/reference/getParameterList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to the getParameterList function — getParameterList","text":"portal URL Kisters KiWIS database. station_no gauge numbers, site_list Hydstra functions. many fields can used filter select records, seems common give special treatment. others, use see extra_list returnfields default 'default', otherwise '' get everything available, comma-separated string fields return. Important- 'coverage' required return start end dates. included default. Including 'ca_sta' give DATA_OWNER_NAME, often useful. Full list function available Kisters docs extra_list named list fields select . Names (usually) returnfields (returned returnfields = ''), though work- see queryfields Kisters docs. Values comma-separated characters, can contain grep wildcards e.g. extra_list = list(station_name = 'RIVER MURRAY*). Can also use groups getGroupList(), e.g. extra_list = list(stationgroup_id = '20017550') gets MDB_WIP_Watercourse stations.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getParameterList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface to the getParameterList function — getParameterList","text":"tibble","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getStationList.html","id":null,"dir":"Reference","previous_headings":"","what":"getStationList API call to Kisters KiWIS API — getStationList","title":"getStationList API call to Kisters KiWIS API — getStationList","text":"API used Australian Bureau Meteorology many others. consistency similar state functions using Kisters Hydstra, kept station_no argument name. return fields can searched though, using extra_list. equivalent state (Hydstra) function get_db_info() (close approximation).","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getStationList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getStationList API call to Kisters KiWIS API — getStationList","text":"","code":"getStationList(   portal,   station_no = NULL,   returnfields = \"default\",   extra_list = list(NULL) )"},{"path":"https://galenholt.github.io/hydrogauge/reference/getStationList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getStationList API call to Kisters KiWIS API — getStationList","text":"portal URL Kisters KiWIS database. station_no gauge numbers, site_list Hydstra functions. many fields can used filter select records, seems common give special treatment. others, use see extra_list returnfields default 'default', otherwise '' get everything available, comma-separated string fields return. Important- 'coverage' required return start end dates. included default. Including 'ca_sta' give DATA_OWNER_NAME, often useful. Full list function available Kisters docs extra_list named list fields select . Names (usually) returnfields (returned returnfields = ''), though work- see queryfields Kisters docs. Values comma-separated characters, can contain grep wildcards e.g. extra_list = list(station_name = 'RIVER MURRAY*). Can also use groups getGroupList(), e.g. extra_list = list(stationgroup_id = '20017550') gets MDB_WIP_Watercourse stations.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getStationList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getStationList API call to Kisters KiWIS API — getStationList","text":"tibble","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getTimeseriesList.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of timeseries available — getTimeseriesList","title":"Get the list of timeseries available — getTimeseriesList","text":"API used Australian Bureau Meteorology many others. consistency similar state functions using Kisters Hydstra, kept station_no argument name. return fields can searched though, using extra_list. equivalent state (Hydstra) function get_variable_list() (close approximation). available return fields (thus factors can filtered) 'station_name', 'station_no', 'station_id', 'ts_id', 'ts_name', 'ts_path', 'parametertype_id', 'parametertype_name', station_no argument matches station_no consistency across state functions. Important- additional returnfield option, coverage, returns period record. included default, limit returnfields, must include get time period. may additional undocumented returnfield options; appears returned getStationList available, e.g. 'station_latitude'","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getTimeseriesList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of timeseries available — getTimeseriesList","text":"","code":"getTimeseriesList(   portal,   station_no = NULL,   returnfields = \"default\",   extra_list = list(NULL),   return_timezone = \"UTC\" )"},{"path":"https://galenholt.github.io/hydrogauge/reference/getTimeseriesList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the list of timeseries available — getTimeseriesList","text":"portal URL Kisters KiWIS database. station_no gauge numbers, site_list Hydstra functions. many fields can used filter select records, seems common give special treatment. others, use see extra_list returnfields default 'default', otherwise '' get everything available, comma-separated string fields return. Important- 'coverage' required return start end dates. included default. Including 'ca_sta' give DATA_OWNER_NAME, often useful. Full list function available Kisters docs extra_list named list, see getStationList(), special note can include 'timezone' argument determines timezone API returns . dangerous, since API ingests dates default timezone inferred return absence ability extract . Thus, including timezone extra_list may yield unexpected outcomes requesting dates. better option use return_timezone adjust return values. said, may databases return gauge-local tzs, allowed concatenated. solution just work UTC timezone = 'UTC' extralist make outputs tz. return_timezone character OlsonNames() one three special cases: 'db_default', 'char' 'raw'. Default 'UTC'. 'db_default', uses API default. BOM defaults +10. 'char' 'raw', returns time column -API (string format 'YYYY-MM-DDTHH:MM:SS+TZ')","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getTimeseriesList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of timeseries available — getTimeseriesList","text":"tibble information available timeseries.Times POSIXct UTC default.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getTimeseriesValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Get timeseries from Kiwis (BOM) — getTimeseriesValues","title":"Get timeseries from Kiwis (BOM) — getTimeseriesValues","text":"expects ts_id ts_path () identify timeseries (>= 1) pull. ts_path can generated fly wildcards, straightforward parse- see output getTimeseriesList(). Though ts_id need extracted getTimeseriesList(), may easier get programatically. equivalent state (Hydstra) function get_ts_traces() (close approximation). period used, one (none) start_time end_time can used. neither used, gets recent period.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getTimeseriesValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get timeseries from Kiwis (BOM) — getTimeseriesValues","text":"","code":"getTimeseriesValues(   portal,   ts_id = NULL,   ts_path = NULL,   start_time = NULL,   end_time = NULL,   period = NULL,   returnfields = \"default\",   meta_returnfields = \"default\",   extra_list = list(NULL),   return_timezone = \"UTC\" )"},{"path":"https://galenholt.github.io/hydrogauge/reference/getTimeseriesValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get timeseries from Kiwis (BOM) — getTimeseriesValues","text":"portal URL Kisters KiWIS database. ts_id timeseries id, typically found getTimeseriesList() ts_path timeseries path, can constructed, including wildcards, e.g. ts_path = '*/A4260505/Water*/*DailyMean' Gets daily means 'Water' variables gauge A4260505, might include Level, Discharge, Temperature, etc.. start_time character date date time start database default timezone. Default NULL. end_time character date date time end database default timezone. Default NULL. period character, default NULL. special case 'complete' returns full set data. Otherwise, beginning 'P', followed numbers characers indicating timespan, e.g. 'P2W'. See documentation. returnfields return fields data . Default c('Timestamp', 'Value', 'Quality Code'). Full list Kisters docs) meta_returnfields return fields variable site. seems able access getTimeseriesList() returnfields. Full list Kisters docs) extra_list named list, see getStationList(), special note can include 'timezone' argument determines timezone API returns . dangerous, since API ingests dates default timezone inferred return absence ability extract . Thus, including timezone extra_list may yield unexpected outcomes requesting dates. better option use return_timezone adjust return values. said, may databases return gauge-local tzs, allowed concatenated. solution just work UTC timezone = 'UTC' extralist make outputs tz. return_timezone character OlsonNames() one three special cases: 'db_default', 'char' 'raw'. Default 'UTC'. 'db_default', uses API default. BOM defaults +10. 'char' 'raw', returns time column -API (string format 'YYYY-MM-DDTHH:MM:SS+TZ')","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getTimeseriesValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get timeseries from Kiwis (BOM) — getTimeseriesValues","text":"tibble timeseries values. Times POSIXct UTC default.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/getTimeseriesValues.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get timeseries from Kiwis (BOM) — getTimeseriesValues","text":"Timezone note: BOM documentation says data returned local time. true web interface, API. API defaults +10, can choose, default return_timezone = 'UTC' consistency. , start_time end_time must database-local time; setting different return time, either directly API timezone argument extra_list, affect interpretation times. getTimeseriesList() returns database_timezone make easier. fetch_kiwis_timeseries() handles work automatically. Data size note: request much data, throw 500 error. \"Maximum number timeseries values surpassed. Please narrow request. Limit : 250000\" Try reduce amount data requested single call. limit reality seems much lower; frequently encounter asking abou 120,000 records","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_datasources_by_site.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the available datasources for each site — get_datasources_by_site","title":"Gets the available datasources for each site — get_datasources_by_site","text":"far can tell, \"\", \"TELEM\", \"TELEMCOPY\", checked sites","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_datasources_by_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the available datasources for each site — get_datasources_by_site","text":"","code":"get_datasources_by_site(portal, site_list)"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_datasources_by_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the available datasources for each site — get_datasources_by_site","text":"portal character data portal (case insensitive). Default 'victoria' site_list character site code, either single site code \"sitenumber\", comma-separated codes single string \"sitenumber1, sitenumber2, vector site codes c(\"sitenumber1\", \"sitenumber2\")","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_datasources_by_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the available datasources for each site — get_datasources_by_site","text":"tibble sites datasources present","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_datasources_by_site.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the available datasources for each site — get_datasources_by_site","text":"","code":"checkdata <- get_datasources_by_site(portal = \"vic\",   site_list = c(\"233217, 405328, 405331, 405837\"))"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_db_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Access to the get_db_info API call. — get_db_info","title":"Access to the get_db_info API call. — get_db_info","text":"development, use. turn internal keyword works.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_db_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access to the get_db_info API call. — get_db_info","text":"","code":"get_db_info(portal, table_name = \"site\", station_filter, return_type = \"hash\")"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_db_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access to the get_db_info API call. — get_db_info","text":"portal url elsewhere table_name table station_filter query somehow return_type format return?","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_db_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access to the get_db_info API call. — get_db_info","text":"dataframe","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Hydstra groups sites belong to. — get_groups","title":"Get Hydstra groups sites belong to. — get_groups","text":"particularly useful, far can tell, theory lets us use various filters get_db_info. problem groups seem useful practice takes forever.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Hydstra groups sites belong to. — get_groups","text":"","code":"get_groups(portal, site_list)"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Hydstra groups sites belong to. — get_groups","text":"portal character data portal (case insensitive). Default 'victoria' site_list character site code, either single site code \"sitenumber\", comma-separated codes single string \"sitenumber1, sitenumber2, vector site codes c(\"sitenumber1\", \"sitenumber2\")","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Hydstra groups sites belong to. — get_groups","text":"tibble sites datasources present","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_response.html","id":null,"dir":"Reference","previous_headings":"","what":"The actual API call — get_response","title":"The actual API call — get_response","text":"functions build param list process output. always goes middle actually hit API. Exposing ad-hoc testing, etc.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The actual API call — get_response","text":"","code":"get_response(   baseURL,   api_body_list = NULL,   api_query_list = list(nullquery = NULL),   .errorhandling = \"stop\" )"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The actual API call — get_response","text":"baseURL character URL request gets appended api_body_list list arguments particular call .errorhandling intended allow passing removing errors. Currently implemented places.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The actual API call — get_response","text":"response body list","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_sites_by_datasource.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets sites that have a given datasource — get_sites_by_datasource","title":"Gets sites that have a given datasource — get_sites_by_datasource","text":"Useful getting lists sites","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_sites_by_datasource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets sites that have a given datasource — get_sites_by_datasource","text":"","code":"get_sites_by_datasource(portal, datasources)"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_sites_by_datasource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets sites that have a given datasource — get_sites_by_datasource","text":"portal character data portal (case insensitive). Default 'victoria' datasources get_ts_traces(), can vector. far can tell, options '', 'TELEM', 'TELEMCOPY'. multiple, c('', 'TELEM')","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_sites_by_datasource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets sites that have a given datasource — get_sites_by_datasource","text":"tibble sites datasources","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_sites_by_datasource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets sites that have a given datasource — get_sites_by_datasource","text":"","code":"sxd <- get_sites_by_datasource(portal = 'vic', datasources = c('A', 'TELEM'))"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_ts_traces.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets timeseries for sites and variables — get_ts_traces","title":"Gets timeseries for sites and variables — get_ts_traces","text":"Takes list sites variables fetches timeseries. Variables may include derived base. similar underlying API call, much automation finding variables, checking times, etc. variables available site given times just silently return . automated (currently slower) approach, see fetch_hydstra_timeseries(), also allows .errorhandling argument.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_ts_traces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets timeseries for sites and variables — get_ts_traces","text":"","code":"get_ts_traces(   portal,   site_list,   datasource = \"A\",   var_list = c(\"100\", \"141\"),   start_time,   end_time,   interval = \"day\",   data_type = \"mean\",   multiplier = 1,   return_timezone = \"UTC\",   returnformat = \"df\",   .errorhandling = \"stop\" )"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_ts_traces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets timeseries for sites and variables — get_ts_traces","text":"portal character data portal (case insensitive). Default 'victoria' site_list character site code, either single site code \"sitenumber\", comma-separated codes single string \"sitenumber1, sitenumber2, vector site codes c(\"sitenumber1\", \"sitenumber2\") datasource character datasource code. knowledge, options \"\", \"TELEM\", \"TELEMCOPY\". Passing multiple currently supported. var_list character vector variable codes. Needs either single code vector (c(\"code1\", \"code2\")), comma-separated string start_time character, numeric, date giving start time. API expects 14-digit character \"YYYYMMDDHHIIEE\", turn numeric dates , pad zeros given less 14 digits, e.g. 20200101 padded give midnight 1 Jan 2020. end_time character, numeric, date giving end time. API expects 14-digit character \"YYYYMMDDHHIIEE\", turn numeric dates , pad zeros given less 14 digits, e.g. 20200101 padded give midnight 1 Jan 2020. interval character, period report. think capitalisation matters. Options: \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\". data_type character, statistic apply. Warning: takes one value, applied variables. may appropriate. variables different statistics, run get_ts_traces multiple times. Options: \"mean\", \"max\", \"min\", \"start\", \"end\", \"first\", \"last\", \"tot\", \"maxmin\", \"point\", \"cum\". currently tested. multiplier character, interval multiplier. think allows intervals like 5 days, passing interval = 'day' multiplier = 5. tested 1 present. return_timezone character OlsonNames() one three special cases: 'db_default', 'char' 'raw'. Default 'UTC'. 'db_default', uses API default. 'char', returns string format 'YYYY-MM-DDTHH:MM:SS+TZ', needed info (matching Kiwis returns). 'raw', returns time column -API (14-digit string numbers 'YYYMMDDHHMMSS') \"sxvlist\" returns list separate tibble site x variable combination returnformat character, one \"df\" returns tibble \"varlist\" returns list separate tibble variable (may multiple sites per tibble) \"sitelist\" returns list separate tibble site (may multiple variables per tibble) .errorhandling foreach::foreach() (handled api_error_catch()) Default 'stop'. Made available primarily use 'pass' big requests die due API errors. careful- errors just get passed data missing.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_ts_traces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets timeseries for sites and variables — get_ts_traces","text":"tibble(s) requested variables requested sites (exist). See returnformat, either tibble list tibbles","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_ts_traces.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gets timeseries for sites and variables — get_ts_traces","text":"Timezone note: Data returned API local time, default output UTC consistency. Note, however start_time end_time must database-local time. Thus, using programatically, can easiest use 'raw' 'db_default'. , API returns 0 data outside range request spans across boundary. Check data get_variable_list() use fetch_hydstra_timeseries(), check automatically.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_ts_traces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets timeseries for sites and variables — get_ts_traces","text":"","code":"simpletrace <- get_ts_traces(   portal = 'vic',   site_list = \"233217\",   datasource = \"A\",   var_list = c(\"100\", \"141\"),   start_time = \"20200101\", end_time = \"20200105\",   interval = \"day\", data_type = \"mean\",   multiplier = 1, returnformat = \"df\" )"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_variable_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the variables available for sites and datasources — get_variable_list","title":"Gets the variables available for sites and datasources — get_variable_list","text":"Gets variables available sites datasources","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_variable_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the variables available for sites and datasources — get_variable_list","text":"","code":"get_variable_list(portal, site_list, datasource, return_timezone = \"UTC\")"},{"path":"https://galenholt.github.io/hydrogauge/reference/get_variable_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the variables available for sites and datasources — get_variable_list","text":"portal character data portal (case insensitive). Default 'victoria' site_list character site code, either single site code \"sitenumber\", comma-separated codes single string \"sitenumber1, sitenumber2, vector site codes c(\"sitenumber1\", \"sitenumber2\") datasource get_ts_traces(), can vector. far can tell, options '', 'TELEM', 'TELEMCOPY'. multiple, c('', 'TELEM') return_timezone character OlsonNames() one three special cases: 'db_default', 'char' 'raw'. Default 'UTC'. 'db_default', uses API default. 'char', returns string format 'YYYY-MM-DDTHH:MM:SS+TZ', needed info (matching Kiwis returns). 'raw', returns time column -API (14-digit string numbers 'YYYMMDDHHMMSS') \"sxvlist\" returns list separate tibble site x variable combination","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_variable_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the variables available for sites and datasources — get_variable_list","text":"tibble variables site datasource.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/get_variable_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the variables available for sites and datasources — get_variable_list","text":"","code":"v2 <- get_variable_list(portal = 'vic',   site_list = \"233217, 405328, 405331, 405837\",   datasource = c(\"A\", \"TELEM\") )"},{"path":"https://galenholt.github.io/hydrogauge/reference/hydrogauge-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hydrogauge: Pulls information from the Kisters Kiwis and Hydstra APIs — hydrogauge-package","title":"hydrogauge: Pulls information from the Kisters Kiwis and Hydstra APIs — hydrogauge-package","text":"package provides R wrappers () API calls possible Kisters Kiwis Hydstra APIs. focus initially Victoria, Australia using Hydstra, best-tested , expansion BOM brought KiWis. likely generic across jurisdictions using services. tried provide functionality query available options different arguments.","code":""},{"path":[]},{"path":"https://galenholt.github.io/hydrogauge/reference/hydrogauge-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hydrogauge: Pulls information from the Kisters Kiwis and Hydstra APIs — hydrogauge-package","text":"Maintainer: Galen Holt g.holt@deakin.edu.au (ORCID)","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/multi_tz_check.html","id":null,"dir":"Reference","previous_headings":"","what":"returns single tz from vector, with check for equality — multi_tz_check","title":"returns single tz from vector, with check for equality — multi_tz_check","text":"returns single tz vector, check equality","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/multi_tz_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns single tz from vector, with check for equality — multi_tz_check","text":"","code":"multi_tz_check(tzvec)"},{"path":"https://galenholt.github.io/hydrogauge/reference/multi_tz_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns single tz from vector, with check for equality — multi_tz_check","text":"tzvec","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/multi_tz_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns single tz from vector, with check for equality — multi_tz_check","text":"character tz name","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_bom_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal with parsing the kiwis timestamps into UTC or local time — parse_bom_times","title":"Deal with parsing the kiwis timestamps into UTC or local time — parse_bom_times","text":"Local time can fraught, issues, use one others local time parsing manually based particular situation.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_bom_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal with parsing the kiwis timestamps into UTC or local time — parse_bom_times","text":"","code":"parse_bom_times(timevec, timetype = \"char\")"},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_bom_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal with parsing the kiwis timestamps into UTC or local time — parse_bom_times","text":"timevec output Timestamp column format BOM, e.g. '2020-01-01T00:00:00.000+10:00' timetype character, one 'char' (default), 'raw', 'UTC', 'local'. 'char' 'raw' return Timestamp comes BOM, others parse dates.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_bom_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal with parsing the kiwis timestamps into UTC or local time — parse_bom_times","text":"vector, either character POSIX","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_state_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal with parsing the Hydstra/hydllp timestamps into UTC or local time — parse_state_times","title":"Deal with parsing the Hydstra/hydllp timestamps into UTC or local time — parse_state_times","text":"similar parse_bom_times() deal tz differently, return character versions differently","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_state_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal with parsing the Hydstra/hydllp timestamps into UTC or local time — parse_state_times","text":"","code":"parse_state_times(timevec, tz_name, tz_offset, timetype)"},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_state_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal with parsing the Hydstra/hydllp timestamps into UTC or local time — parse_state_times","text":"timevec output t column Hydstra, typically 14-digit double tz_name name incoming timezone, OlsonNames, needed lubridate tz_offset offset incoming timezone, easier parse 'char' timetype character, one 'char' (default), 'raw', 'UTC', 'local'. 'char' returns character format YYYY-MM-DDTHH:MM:SS+TZ matching BOM-style (containing necessary info). 'raw' simply returns unmodified numeric, .","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_state_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal with parsing the Hydstra/hydllp timestamps into UTC or local time — parse_state_times","text":"vector, either character, numeric, POSIX","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the base of the request URL given state name — parse_url","title":"Returns the base of the request URL given state name — parse_url","text":"functions tested Victoria- states work though, built allow querying .","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the base of the request URL given state name — parse_url","text":"","code":"parse_url(portal, test = TRUE, type = FALSE, .errorhandling = \"stop\")"},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the base of the request URL given state name — parse_url","text":"portal character, URL name data portal Australian portals. Currently accepts names 'vic', 'nsw', 'qld', 'bom' (case insensitive). test logical, default TRUE- just return URL, ping test works return errors type logical, FALSE - try infer whether kiwis hydstra .errorhandling intended allow passing removing errors. Currently implemented places.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/parse_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the base of the request URL given state name — parse_url","text":"character URL API request","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/plot_datasources_by_site.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of which sites have which datasource — plot_datasources_by_site","title":"Plot heatmap of which sites have which datasource — plot_datasources_by_site","text":"Needs work make general feed sites","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/plot_datasources_by_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of which sites have which datasource — plot_datasources_by_site","text":"","code":"plot_datasources_by_site(ds_by_site, returntype = \"plot\")"},{"path":"https://galenholt.github.io/hydrogauge/reference/plot_datasources_by_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of which sites have which datasource — plot_datasources_by_site","text":"ds_by_site tibble site datasource columns returntype 'plot' 'table' Plot much useful- sure user just make table.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/plot_datasources_by_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap of which sites have which datasource — plot_datasources_by_site","text":"ggplot, typically","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/request_to_gaugetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform requested times to the gauge timezones, whatever their tz and the tz of the gauge/database — request_to_gaugetime","title":"Transform requested times to the gauge timezones, whatever their tz and the tz of the gauge/database — request_to_gaugetime","text":"Transform requested times gauge timezones, whatever tz tz gauge/database","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/request_to_gaugetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform requested times to the gauge timezones, whatever their tz and the tz of the gauge/database — request_to_gaugetime","text":"","code":"request_to_gaugetime(reqtime, gaugetz, request_timezone)"},{"path":"https://galenholt.github.io/hydrogauge/reference/request_to_gaugetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform requested times to the gauge timezones, whatever their tz and the tz of the gauge/database — request_to_gaugetime","text":"reqtime requested time. Character, numeric, POSIXt gaugetz database timezone request_timezone declared timezone reqtime, ignored reqtime POSIXt, case tz known.","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/request_to_gaugetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform requested times to the gauge timezones, whatever their tz and the tz of the gauge/database — request_to_gaugetime","text":"requested time timezone gaugetz","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/send_to_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a common request format to either kiwis or hydstra — send_to_type","title":"Make a common request format to either kiwis or hydstra — send_to_type","text":"Make common request format either kiwis hydstra","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/send_to_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a common request format to either kiwis or hydstra — send_to_type","text":"","code":"send_to_type(request_table, clean = TRUE)"},{"path":"https://galenholt.github.io/hydrogauge/reference/send_to_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a common request format to either kiwis or hydstra — send_to_type","text":"request_table data.frame columns c('portal', 'gauge', 'start_time', 'end_time', 'variable', 'units', 'timeunit', 'statistic', 'datatype') clean whether clean output standard set columns, leave -returned","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/send_to_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a common request format to either kiwis or hydstra — send_to_type","text":"dataframe timeseries","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/ts_error_catch.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch API errors that don't appear until the list is unpacked — ts_error_catch","title":"Catch API errors that don't appear until the list is unpacked — ts_error_catch","text":"Catch API errors appear list unpacked","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/ts_error_catch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch API errors that don't appear until the list is unpacked — ts_error_catch","text":"","code":"ts_error_catch(bodytib, call = rlang::caller_env(), .errorhandling = \"stop\")"},{"path":"https://galenholt.github.io/hydrogauge/reference/ts_error_catch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Catch API errors that don't appear until the list is unpacked — ts_error_catch","text":"bodytib dataframe constructed API list error_num column call see rlang::abort(); passes calling environment clearer messages .errorhandling foreach::foreach()- passed handle simply aborting vs something error continuing","code":""},{"path":"https://galenholt.github.io/hydrogauge/reference/ts_error_catch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Catch API errors that don't appear until the list is unpacked — ts_error_catch","text":"typically bodytib, unless errors, determined .errorhandling","code":""},{"path":[]},{"path":"https://galenholt.github.io/hydrogauge/news/index.html","id":"updates-0-1-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"hydrogauge 0.1.1","text":"New structure allow KiWIS hydstra New pkgdown site New articles","code":""},{"path":"https://galenholt.github.io/hydrogauge/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"hydrogauge 0.1.1","text":"Victoria’s changed URL New Qld structure","code":""}]
