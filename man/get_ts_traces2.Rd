% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_ts_traces.R
\name{get_ts_traces2}
\alias{get_ts_traces2}
\title{Gets timeseries for sites and variables with more automation than
\code{get_ts_traces}}
\usage{
get_ts_traces2(
  state = "victoria",
  site_list,
  datasource = "A",
  var_list = c("100", "140"),
  start_time,
  end_time,
  interval = "day",
  data_type = "mean",
  multiplier = 1,
  returnformat = "df",
  .errorhandling = "stop"
)
}
\arguments{
\item{state}{character for the state (partial matching accepted). Assumes Victoria, but other states may work as well, though are untested. Used to get the API URL}

\item{site_list}{character site code, either a single site code \code{"sitenumber"}, comma-separated codes in a single string \verb{"sitenumber1, sitenumber2}, or a vector of site codes \code{c("sitenumber1", "sitenumber2")}}

\item{datasource}{character for datasource code. To my knowledge, options are \code{"A"}, \code{"TELEM"}, \code{"TELEMCOPY"}. Passing multiple not currently supported.}

\item{var_list}{as in \code{\link[=get_ts_traces]{get_ts_traces()}}, but can also take \code{"all"} to get all
available variables at each site in \code{site_list}}

\item{start_time}{as in \code{\link[=get_ts_traces]{get_ts_traces()}}, but can also take \code{"all"} to start
at the first timepoint for each variable in \code{var_list} at each site in
\code{site_list}}

\item{end_time}{as in \code{\link[=get_ts_traces]{get_ts_traces()}}, but can also take \code{"all"} to end at
the last timepoint for each variable in \code{var_list} at each site in
\code{site_list}}

\item{interval}{character, period to report.
\itemize{
\item Options: \code{"year"}, \code{"month"}, \code{"day"}, \code{"hour"}, \code{"minute"}, \code{"second"}. I don't think capitalisation matters.
}}

\item{data_type}{single character or a vector the same length as \code{var_list}.
If single value, behaves as in \code{\link[=get_ts_traces]{get_ts_traces()}}, applying that function to
all variables. If a vector, it applies the given function to the variable
in the matching position of \code{var_list}. This is potentially the most
important use of this function vs. \code{\link[=get_ts_traces]{get_ts_traces()}}- it allows us to ask for
many variables that might need different statistics. \emph{Note}- if \code{var_list = "all"}, there is no way to match since the variables are unknown and may
change between sits, and so \code{data_type} should be a single function.}

\item{multiplier}{character, interval multiplier. I \emph{think} this allows intervals like 5 days, by passing \code{interval = 'day'} and \code{multiplier = 5}. Not tested other than 1 at present.}

\item{returnformat}{character, one of
\itemize{
\item \code{"df"} returns a tibble
\item \code{"varlist"} returns a list with an separate tibble for each variable (may have multiple sites per tibble)
\item \code{"sitelist"} returns a list with an separate tibble for each site (may have multiple variables per tibble)
\item \code{"sxvlist"} returns a list with an separate tibble for each site x variable combination
}}

\item{.errorhandling}{as in \code{\link[foreach:foreach]{foreach::foreach()}} (but handled in
\code{\link[=api_error_catch]{api_error_catch()}}) Default 'stop'. Made available here primarily to use
'pass' so big requests don't die due to API errors. \strong{Be careful}- those
errors then just get passed and so the data will be missing. Only currently
implemented and working in \code{\link[=get_ts_traces2]{get_ts_traces2()}}}
}
\value{
tibble(s) with requested variables at requested sites (where they exist). See \code{returnformat}, either a tibble or list of tibbles
}
\description{
This is under development, and offers both a bit more automation and a bit
more flexibility than \code{\link[=get_ts_traces]{get_ts_traces()}}, but is currently slower due to more
API network overhead. It loops over each distinct site and variable we're
asking for, which allows us to tailor the requests a bit more. This approach
allows us to do some useful things, though not always at the same time. We
can ask for "all" in \code{var_type}, \code{start_time}, and \code{end_time}, and it will
query the available data and get what's there. We can also ask for different
\code{data_type} statistics for different variables in \code{var_type}, which is very
important, though this cannot happen along with \code{var_type = "all"}. There are
likely speedups we can do to combine some requests, and there is the
possibility of future development allowing feeding this a pre-prepared table
of arguments.
}
