% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_ts_traces.R
\name{get_ts_traces}
\alias{get_ts_traces}
\title{Gets timeseries for sites and variables}
\usage{
get_ts_traces(
  baseURL = "https://data.water.vic.gov.au/cgi/webservice.exe?",
  site_list,
  datasource = "A",
  var_list = c("100", "140"),
  start_time,
  end_time,
  interval = "day",
  data_type = "mean",
  multiplier = 1,
  returnformat = "df"
)
}
\arguments{
\item{baseURL}{character, url for the base API call. Assumes Victoria, but other states may work as well, though are untested.}

\item{site_list}{character site code, either a single site code \code{"sitenumber"}, comma-separated codes in a single string \verb{"sitenumber1, sitenumber2}, or a vector of site codes \code{c("sitenumber1", "sitenumber2")}}

\item{datasource}{character for datasource code. To my knowledge, options are \code{"A"}, \code{"TELEM"}, \code{"TELEMCOPY"}. Passing multiple not currently supported.}

\item{var_list}{character vector of variable codes. Needs to be either single code or vector (\code{c("code1", "code2")}), \emph{not} a comma-separated string}

\item{start_time}{character, numeric, or date giving the start time. API expects a 14-digit character \code{"YYYYMMDDHHIIEE"}, but this will turn numeric or dates into that, and pad zeros if given less than 14 digits, e.g. \code{20200101} would be padded to give midnight on 1 Jan 2020.}

\item{end_time}{character, numeric, or date giving the end time. API expects a 14-digit character \code{"YYYYMMDDHHIIEE"}, but this will turn numeric or dates into that, and pad zeros if given less than 14 digits, e.g. \code{20200101} would be padded to give midnight on 1 Jan 2020.}

\item{interval}{character, period to report.
\itemize{
\item Options: \code{"year"}, \code{"month"}, \code{"day"}, \code{"hour"}, \code{"minute"}, \code{"second"}. I don't think capitalisation matters.
}}

\item{data_type}{character, the statistic to apply. \emph{Warning:} only takes one value, which is applied to all variables. This may not be appropriate. If variables should have different statistics, run \code{get_ts_traces} multiple times.
\itemize{
\item Options: \code{"mean"}, \code{"max"}, \code{"min"}, \code{"start"}, \code{"end"}, \code{"first"}, \code{"last"}, \code{"tot"}, \code{"maxmin"}, \code{"point"}, \code{"cum"}. Not all are currently tested.
}}

\item{multiplier}{character, interval multiplier. I \emph{think} this allows intervals like 5 days, by passing \code{interval = 'day'} and \code{multiplier = 5}. Not tested other than 1 at present.}

\item{returnformat}{character, one of
\itemize{
\item \code{"df"} returns a tibble
\item \code{"varlist"} returns a list with an separate tibble for each variable (may have multiple sites per tibble)
\item \code{"sitelist"} returns a list with an separate tibble for each site (may have multiple variables per tibble)
\item \code{"sxvlist"} returns a list with an separate tibble for each site x variable combination
}}
}
\value{
tibble(s) with requested variables at requested sites (where they exist). See \code{returnformat}, either a tibble or list of tibbles
}
\description{
Takes a list of sites and variables and fetches them. Variables may include
derived and base. This is very similar to the underlying API call, and does
not do very much automation of finding variables, checking times, etc. If
variables are not available for a site or for given times it just silently
does not return them. For a more automated (but currently slower) approach,
see \link{get_ts_traces2}.
}
\examples{
simpletrace <- get_ts_traces(site_list = "233217",
datasource = 'A',
var_list = c('100', '140'),
start_time = '20200101', end_time = '20200105',
interval = 'day', data_type = 'mean',
multiplier = 1, returnformat = 'df')
}
