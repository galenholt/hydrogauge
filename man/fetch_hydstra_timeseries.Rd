% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_hydstra_timeseries.R
\name{fetch_hydstra_timeseries}
\alias{fetch_hydstra_timeseries}
\title{Wrapper for Hydstra/hydllp to find and return desired timeseries}
\usage{
fetch_hydstra_timeseries(
  portal,
  gauge,
  datasource = "A",
  var_list = NULL,
  variable = NULL,
  units = NULL,
  timeunit = "day",
  statistic = "mean",
  start_time,
  end_time,
  multiplier = 1,
  ignore_fromderived = TRUE,
  returnformat = "df",
  request_timezone = "db_default",
  return_timezone = "UTC",
  .errorhandling = "pass"
)
}
\arguments{
\item{portal}{character for the data portal (case insensitive). Default
'victoria'}

\item{gauge}{character vector of gauge numbers, as \code{site_list} for Hydstra
functions (\code{station_no} for Kiwis functions)}

\item{datasource}{character for datasource code. To my knowledge, options are
\code{"A"}, \code{"TELEM"}, \code{"TELEMCOPY"}. Passing multiple not currently supported.}

\item{var_list}{as in \code{\link[=get_ts_traces]{get_ts_traces()}}, but can also take \code{"all"} to get all
available variables at each site in \code{site_list}. If 'all', overrides
\code{variable} and \code{units}, though using \code{var_list} with those is always
dangerous.}

\item{variable}{allows searching by variable name, e.g. 'discharge' with
grepl as in \code{\link[=fetch_kiwis_timeseries]{fetch_kiwis_timeseries()}}}

\item{units}{allows searching by the units of the variable, e.g. 'ML/d' with
grepl as in \code{\link[=fetch_kiwis_timeseries]{fetch_kiwis_timeseries()}}}

\item{timeunit}{same as \code{interval} in \code{\link[=get_ts_traces]{get_ts_traces()}}. Name changed for
consistency and interpretation.}

\item{statistic}{same as \code{data_type} in \code{\link[=get_ts_traces]{get_ts_traces()}}. Name changed for
consistency and interpretation. Can be a single character or a vector the
same length as \code{var_list}. If single value, behaves as in
\code{\link[=get_ts_traces]{get_ts_traces()}}, applying that function to all variables. If a vector, it
applies the given function to the variable in the matching position of
\code{var_list}. This allows us to ask for many variables that might need
different statistics. \emph{Note}- if \code{var_list = "all"}, there is no way to
match since the variables are unknown and may change between sits, and so
\code{statistic} should be a single function.}

\item{start_time}{as in \code{\link[=get_ts_traces]{get_ts_traces()}}, but can also take \code{"all"} to start
at the first timepoint for each variable in \code{var_list} at each site in
\code{site_list}}

\item{end_time}{as in \code{\link[=get_ts_traces]{get_ts_traces()}}, but can also take \code{"all"} to end at
the last timepoint for each variable in \code{var_list} at each site in
\code{site_list}}

\item{multiplier}{character, interval multiplier. I \emph{think} this allows
intervals like 5 days, by passing \code{interval = 'day'} and \code{multiplier = 5}.
Not tested other than 1 at present.}

\item{ignore_fromderived}{logical, default TRUE. Sometimes a derived variable
(140, 141) is \emph{also} available as a var_from, seemingly usually with a
longer historical record. TRUE (the default) ignores that, and uses just
the e.g. var_from = 100, var_to = 140. FALSE returns both sets, e.g. all
records with the derived variable as var_to. If FALSE, \emph{look at the output
carefully, it's often very strange}}

\item{returnformat}{character, one of
\itemize{
\item \code{"df"} returns a tibble
\item \code{"varlist"} returns a list with an separate tibble for each variable (may have multiple sites per tibble)
\item \code{"sitelist"} returns a list with an separate tibble for each site (may have multiple variables per tibble)
}}

\item{request_timezone}{ignored if start_time and end_time are time objects,
otherwise a timezone from \code{\link[=OlsonNames]{OlsonNames()}} or 'db_default'}

\item{return_timezone}{character in \code{\link[=OlsonNames]{OlsonNames()}} or one of three special
cases: \code{'db_default'}, \code{'char'} or \code{'raw'}. Default 'UTC'. If 'db_default',
uses the API default. If \code{'char'}, returns a string in the format
\code{'YYYY-MM-DDTHH:MM:SS+TZ'}, having all needed info (and matching Kiwis
returns). If \code{'raw'}, returns the time column as-is from the API (a
14-digit string of numbers 'YYYMMDDHHMMSS')
\itemize{
\item \code{"sxvlist"} returns a list with an separate tibble for each site x variable combination
}}

\item{.errorhandling}{as in \code{\link[foreach:foreach]{foreach::foreach()}} (but handled in
\code{\link[=api_error_catch]{api_error_catch()}}) Default 'stop'. Made available here primarily to use
'pass' so big requests don't die due to API errors. \strong{Be careful}- those
errors then just get passed and so the data will be missing.}
}
\value{
a tibble of the requested timeseries
}
\description{
This wraps \code{\link[=get_variable_list]{get_variable_list()}} and \code{\link[=get_ts_traces]{get_ts_traces()}}, allowing a bit more
automation and a bit more flexibility than \code{\link[=get_ts_traces]{get_ts_traces()}}, but is
currently slower due to more API network overhead. It loops over each
distinct site and variable we're asking for, which allows us to tailor the
requests a bit more. This approach allows us to do some useful things, though
not always at the same time. We can ask for "all" in \code{var_type},
\code{start_time}, and \code{end_time}, and it will query the available data and get
what's there. We can also ask for different \code{data_type} (\code{statistic} in this
function for clarity) for different variables in \code{var_type}, which is very
important, though this cannot happen along with \code{var_type = "all"}. There are
likely speedups we can do to combine some requests, and there is the
possibility of future development allowing feeding this a pre-prepared table
of arguments.
}
